/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.robovm.llvm.binding;

public class LLVM implements LLVMConstants {
  public static void InitializeCore(PassRegistryRef R) {
    LLVMJNI.InitializeCore(PassRegistryRef.getCPtr(R));
  }

  public static void Shutdown() {
    LLVMJNI.Shutdown();
  }

  public static String CreateMessage(String Message) {
    return LLVMJNI.CreateMessage(Message);
  }

  public static void DisposeMessage(String Message) {
    LLVMJNI.DisposeMessage(Message);
  }

  public static ContextRef ContextCreate() {
    return new ContextRef(LLVMJNI.ContextCreate(), true);
  }

  public static ContextRef GetGlobalContext() {
    return new ContextRef(LLVMJNI.GetGlobalContext(), true);
  }

  public static SWIGTYPE_p_f_LLVMDiagnosticInfoRef_p_void__void ContextGetDiagnosticHandler(ContextRef C) {
    long cPtr = LLVMJNI.ContextGetDiagnosticHandler(ContextRef.getCPtr(C));
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_LLVMDiagnosticInfoRef_p_void__void(cPtr, false);
  }

  public static SWIGTYPE_p_void ContextGetDiagnosticContext(ContextRef C) {
    long cPtr = LLVMJNI.ContextGetDiagnosticContext(ContextRef.getCPtr(C));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void ContextDispose(ContextRef C) {
    LLVMJNI.ContextDispose(ContextRef.getCPtr(C));
  }

  public static String GetDiagInfoDescription(DiagnosticInfoRef DI) {
    return LLVMJNI.GetDiagInfoDescription(DiagnosticInfoRef.getCPtr(DI));
  }

  public static DiagnosticSeverity GetDiagInfoSeverity(DiagnosticInfoRef DI) {
    return DiagnosticSeverity.swigToEnum(LLVMJNI.GetDiagInfoSeverity(DiagnosticInfoRef.getCPtr(DI)));
  }

  public static int GetMDKindIDInContext(ContextRef C, String Name) {
    return LLVMJNI.GetMDKindIDInContext(ContextRef.getCPtr(C), Name);
  }

  public static int GetMDKindID(String Name) {
    return LLVMJNI.GetMDKindID(Name);
  }

  public static int GetEnumAttributeKindForName(String Name, long SLen) {
    return LLVMJNI.GetEnumAttributeKindForName(Name, SLen);
  }

  public static int GetLastEnumAttributeKind() {
    return LLVMJNI.GetLastEnumAttributeKind();
  }

  public static SWIGTYPE_p_LLVMAttributeRef CreateEnumAttribute(ContextRef C, int KindID, long Val) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.CreateEnumAttribute(ContextRef.getCPtr(C), KindID, Val), true);
  }

  public static int GetEnumAttributeKind(SWIGTYPE_p_LLVMAttributeRef A) {
    return LLVMJNI.GetEnumAttributeKind(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static long GetEnumAttributeValue(SWIGTYPE_p_LLVMAttributeRef A) {
    return LLVMJNI.GetEnumAttributeValue(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static SWIGTYPE_p_LLVMAttributeRef CreateStringAttribute(ContextRef C, String K, int KLength, String V, int VLength) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.CreateStringAttribute(ContextRef.getCPtr(C), K, KLength, V, VLength), true);
  }

  public static String GetStringAttributeKind(SWIGTYPE_p_LLVMAttributeRef A, SWIGTYPE_p_unsigned_int Length) {
    return LLVMJNI.GetStringAttributeKind(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A), SWIGTYPE_p_unsigned_int.getCPtr(Length));
  }

  public static String GetStringAttributeValue(SWIGTYPE_p_LLVMAttributeRef A, SWIGTYPE_p_unsigned_int Length) {
    return LLVMJNI.GetStringAttributeValue(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A), SWIGTYPE_p_unsigned_int.getCPtr(Length));
  }

  public static boolean IsEnumAttribute(SWIGTYPE_p_LLVMAttributeRef A) {
    return LLVMJNI.IsEnumAttribute(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static boolean IsStringAttribute(SWIGTYPE_p_LLVMAttributeRef A) {
    return LLVMJNI.IsStringAttribute(SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static ModuleRef ModuleCreateWithName(String ModuleID) {
    return new ModuleRef(LLVMJNI.ModuleCreateWithName(ModuleID), true);
  }

  public static ModuleRef ModuleCreateWithNameInContext(String ModuleID, ContextRef C) {
    return new ModuleRef(LLVMJNI.ModuleCreateWithNameInContext(ModuleID, ContextRef.getCPtr(C)), true);
  }

  public static ModuleRef CloneModule(ModuleRef M) {
    return new ModuleRef(LLVMJNI.CloneModule(ModuleRef.getCPtr(M)), true);
  }

  public static void DisposeModule(ModuleRef M) {
    LLVMJNI.DisposeModule(ModuleRef.getCPtr(M));
  }

  public static String GetModuleIdentifier(ModuleRef M, SWIGTYPE_p_size_t Len) {
    return LLVMJNI.GetModuleIdentifier(ModuleRef.getCPtr(M), SWIGTYPE_p_size_t.getCPtr(Len));
  }

  public static void SetModuleIdentifier(ModuleRef M, String Ident, long Len) {
    LLVMJNI.SetModuleIdentifier(ModuleRef.getCPtr(M), Ident, Len);
  }

  public static String GetDataLayoutStr(ModuleRef M) {
    return LLVMJNI.GetDataLayoutStr(ModuleRef.getCPtr(M));
  }

  public static String GetDataLayout(ModuleRef M) {
    return LLVMJNI.GetDataLayout(ModuleRef.getCPtr(M));
  }

  public static void SetDataLayout(ModuleRef M, String DataLayoutStr) {
    LLVMJNI.SetDataLayout(ModuleRef.getCPtr(M), DataLayoutStr);
  }

  public static String GetTarget(ModuleRef M) {
    return LLVMJNI.GetTarget(ModuleRef.getCPtr(M));
  }

  public static void SetTarget(ModuleRef M, String Triple) {
    LLVMJNI.SetTarget(ModuleRef.getCPtr(M), Triple);
  }

  public static void DumpModule(ModuleRef M) {
    LLVMJNI.DumpModule(ModuleRef.getCPtr(M));
  }

  public static boolean PrintModuleToFile(ModuleRef M, String Filename, StringOut ErrorMessage) {
    return LLVMJNI.PrintModuleToFile(ModuleRef.getCPtr(M), Filename, StringOut.getCPtr(ErrorMessage), ErrorMessage);
  }

  public static String PrintModuleToString(ModuleRef M) {
    return LLVMJNI.PrintModuleToString(ModuleRef.getCPtr(M));
  }

  public static void SetModuleInlineAsm(ModuleRef M, String Asm) {
    LLVMJNI.SetModuleInlineAsm(ModuleRef.getCPtr(M), Asm);
  }

  public static ContextRef GetModuleContext(ModuleRef M) {
    return new ContextRef(LLVMJNI.GetModuleContext(ModuleRef.getCPtr(M)), true);
  }

  public static TypeRef GetTypeByName(ModuleRef M, String Name) {
    return new TypeRef(LLVMJNI.GetTypeByName(ModuleRef.getCPtr(M), Name), true);
  }

  public static int GetNamedMetadataNumOperands(ModuleRef M, String Name) {
    return LLVMJNI.GetNamedMetadataNumOperands(ModuleRef.getCPtr(M), Name);
  }

  public static void GetNamedMetadataOperands(ModuleRef M, String Name, ValueRefArray Dest) {
    LLVMJNI.GetNamedMetadataOperands(ModuleRef.getCPtr(M), Name, ValueRefArray.getCPtr(Dest), Dest);
  }

  public static void AddNamedMetadataOperand(ModuleRef M, String Name, ValueRef Val) {
    LLVMJNI.AddNamedMetadataOperand(ModuleRef.getCPtr(M), Name, ValueRef.getCPtr(Val));
  }

  public static ValueRef AddFunction(ModuleRef M, String Name, TypeRef FunctionTy) {
    return new ValueRef(LLVMJNI.AddFunction(ModuleRef.getCPtr(M), Name, TypeRef.getCPtr(FunctionTy)), true);
  }

  public static ValueRef GetNamedFunction(ModuleRef M, String Name) {
    return new ValueRef(LLVMJNI.GetNamedFunction(ModuleRef.getCPtr(M), Name), true);
  }

  public static ValueRef GetFirstFunction(ModuleRef M) {
    return new ValueRef(LLVMJNI.GetFirstFunction(ModuleRef.getCPtr(M)), true);
  }

  public static ValueRef GetLastFunction(ModuleRef M) {
    return new ValueRef(LLVMJNI.GetLastFunction(ModuleRef.getCPtr(M)), true);
  }

  public static ValueRef GetNextFunction(ValueRef Fn) {
    return new ValueRef(LLVMJNI.GetNextFunction(ValueRef.getCPtr(Fn)), true);
  }

  public static ValueRef GetPreviousFunction(ValueRef Fn) {
    return new ValueRef(LLVMJNI.GetPreviousFunction(ValueRef.getCPtr(Fn)), true);
  }

  public static TypeKind GetTypeKind(TypeRef Ty) {
    return TypeKind.swigToEnum(LLVMJNI.GetTypeKind(TypeRef.getCPtr(Ty)));
  }

  public static boolean TypeIsSized(TypeRef Ty) {
    return LLVMJNI.TypeIsSized(TypeRef.getCPtr(Ty));
  }

  public static ContextRef GetTypeContext(TypeRef Ty) {
    return new ContextRef(LLVMJNI.GetTypeContext(TypeRef.getCPtr(Ty)), true);
  }

  public static void DumpType(TypeRef Val) {
    LLVMJNI.DumpType(TypeRef.getCPtr(Val));
  }

  public static String PrintTypeToString(TypeRef Val) {
    return LLVMJNI.PrintTypeToString(TypeRef.getCPtr(Val));
  }

  public static TypeRef Int1TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int1TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef Int8TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int8TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef Int16TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int16TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef Int32TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int32TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef Int64TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int64TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef Int128TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.Int128TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef IntTypeInContext(ContextRef C, int NumBits) {
    return new TypeRef(LLVMJNI.IntTypeInContext(ContextRef.getCPtr(C), NumBits), true);
  }

  public static TypeRef Int1Type() {
    return new TypeRef(LLVMJNI.Int1Type(), true);
  }

  public static TypeRef Int8Type() {
    return new TypeRef(LLVMJNI.Int8Type(), true);
  }

  public static TypeRef Int16Type() {
    return new TypeRef(LLVMJNI.Int16Type(), true);
  }

  public static TypeRef Int32Type() {
    return new TypeRef(LLVMJNI.Int32Type(), true);
  }

  public static TypeRef Int64Type() {
    return new TypeRef(LLVMJNI.Int64Type(), true);
  }

  public static TypeRef Int128Type() {
    return new TypeRef(LLVMJNI.Int128Type(), true);
  }

  public static TypeRef IntType(int NumBits) {
    return new TypeRef(LLVMJNI.IntType(NumBits), true);
  }

  public static int GetIntTypeWidth(TypeRef IntegerTy) {
    return LLVMJNI.GetIntTypeWidth(TypeRef.getCPtr(IntegerTy));
  }

  public static TypeRef HalfTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.HalfTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef FloatTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.FloatTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef DoubleTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.DoubleTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef X86FP80TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.X86FP80TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef FP128TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.FP128TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef PPCFP128TypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.PPCFP128TypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef HalfType() {
    return new TypeRef(LLVMJNI.HalfType(), true);
  }

  public static TypeRef FloatType() {
    return new TypeRef(LLVMJNI.FloatType(), true);
  }

  public static TypeRef DoubleType() {
    return new TypeRef(LLVMJNI.DoubleType(), true);
  }

  public static TypeRef X86FP80Type() {
    return new TypeRef(LLVMJNI.X86FP80Type(), true);
  }

  public static TypeRef FP128Type() {
    return new TypeRef(LLVMJNI.FP128Type(), true);
  }

  public static TypeRef PPCFP128Type() {
    return new TypeRef(LLVMJNI.PPCFP128Type(), true);
  }

  public static TypeRef FunctionType(TypeRef ReturnType, TypeRefArray ParamTypes, int ParamCount, boolean IsVarArg) {
    return new TypeRef(LLVMJNI.FunctionType(TypeRef.getCPtr(ReturnType), TypeRefArray.getCPtr(ParamTypes), ParamTypes, ParamCount, IsVarArg), true);
  }

  public static boolean IsFunctionVarArg(TypeRef FunctionTy) {
    return LLVMJNI.IsFunctionVarArg(TypeRef.getCPtr(FunctionTy));
  }

  public static TypeRef GetReturnType(TypeRef FunctionTy) {
    return new TypeRef(LLVMJNI.GetReturnType(TypeRef.getCPtr(FunctionTy)), true);
  }

  public static int CountParamTypes(TypeRef FunctionTy) {
    return LLVMJNI.CountParamTypes(TypeRef.getCPtr(FunctionTy));
  }

  public static void GetParamTypes(TypeRef FunctionTy, TypeRefArray Dest) {
    LLVMJNI.GetParamTypes(TypeRef.getCPtr(FunctionTy), TypeRefArray.getCPtr(Dest), Dest);
  }

  public static TypeRef StructTypeInContext(ContextRef C, TypeRefArray ElementTypes, int ElementCount, boolean Packed) {
    return new TypeRef(LLVMJNI.StructTypeInContext(ContextRef.getCPtr(C), TypeRefArray.getCPtr(ElementTypes), ElementTypes, ElementCount, Packed), true);
  }

  public static TypeRef StructType(TypeRefArray ElementTypes, int ElementCount, boolean Packed) {
    return new TypeRef(LLVMJNI.StructType(TypeRefArray.getCPtr(ElementTypes), ElementTypes, ElementCount, Packed), true);
  }

  public static TypeRef StructCreateNamed(ContextRef C, String Name) {
    return new TypeRef(LLVMJNI.StructCreateNamed(ContextRef.getCPtr(C), Name), true);
  }

  public static String GetStructName(TypeRef Ty) {
    return LLVMJNI.GetStructName(TypeRef.getCPtr(Ty));
  }

  public static void StructSetBody(TypeRef StructTy, TypeRefArray ElementTypes, int ElementCount, boolean Packed) {
    LLVMJNI.StructSetBody(TypeRef.getCPtr(StructTy), TypeRefArray.getCPtr(ElementTypes), ElementTypes, ElementCount, Packed);
  }

  public static int CountStructElementTypes(TypeRef StructTy) {
    return LLVMJNI.CountStructElementTypes(TypeRef.getCPtr(StructTy));
  }

  public static void GetStructElementTypes(TypeRef StructTy, TypeRefArray Dest) {
    LLVMJNI.GetStructElementTypes(TypeRef.getCPtr(StructTy), TypeRefArray.getCPtr(Dest), Dest);
  }

  public static TypeRef StructGetTypeAtIndex(TypeRef StructTy, int i) {
    return new TypeRef(LLVMJNI.StructGetTypeAtIndex(TypeRef.getCPtr(StructTy), i), true);
  }

  public static boolean IsPackedStruct(TypeRef StructTy) {
    return LLVMJNI.IsPackedStruct(TypeRef.getCPtr(StructTy));
  }

  public static boolean IsOpaqueStruct(TypeRef StructTy) {
    return LLVMJNI.IsOpaqueStruct(TypeRef.getCPtr(StructTy));
  }

  public static TypeRef GetElementType(TypeRef Ty) {
    return new TypeRef(LLVMJNI.GetElementType(TypeRef.getCPtr(Ty)), true);
  }

  public static TypeRef ArrayType(TypeRef ElementType, int ElementCount) {
    return new TypeRef(LLVMJNI.ArrayType(TypeRef.getCPtr(ElementType), ElementCount), true);
  }

  public static int GetArrayLength(TypeRef ArrayTy) {
    return LLVMJNI.GetArrayLength(TypeRef.getCPtr(ArrayTy));
  }

  public static TypeRef PointerType(TypeRef ElementType, int AddressSpace) {
    return new TypeRef(LLVMJNI.PointerType(TypeRef.getCPtr(ElementType), AddressSpace), true);
  }

  public static int GetPointerAddressSpace(TypeRef PointerTy) {
    return LLVMJNI.GetPointerAddressSpace(TypeRef.getCPtr(PointerTy));
  }

  public static TypeRef VectorType(TypeRef ElementType, int ElementCount) {
    return new TypeRef(LLVMJNI.VectorType(TypeRef.getCPtr(ElementType), ElementCount), true);
  }

  public static int GetVectorSize(TypeRef VectorTy) {
    return LLVMJNI.GetVectorSize(TypeRef.getCPtr(VectorTy));
  }

  public static TypeRef VoidTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.VoidTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef LabelTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.LabelTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef X86MMXTypeInContext(ContextRef C) {
    return new TypeRef(LLVMJNI.X86MMXTypeInContext(ContextRef.getCPtr(C)), true);
  }

  public static TypeRef VoidType() {
    return new TypeRef(LLVMJNI.VoidType(), true);
  }

  public static TypeRef LabelType() {
    return new TypeRef(LLVMJNI.LabelType(), true);
  }

  public static TypeRef X86MMXType() {
    return new TypeRef(LLVMJNI.X86MMXType(), true);
  }

  public static TypeRef TypeOf(ValueRef Val) {
    return new TypeRef(LLVMJNI.TypeOf(ValueRef.getCPtr(Val)), true);
  }

  public static ValueKind GetValueKind(ValueRef Val) {
    return ValueKind.swigToEnum(LLVMJNI.GetValueKind(ValueRef.getCPtr(Val)));
  }

  public static String GetValueName(ValueRef Val) {
    return LLVMJNI.GetValueName(ValueRef.getCPtr(Val));
  }

  public static void SetValueName(ValueRef Val, String Name) {
    LLVMJNI.SetValueName(ValueRef.getCPtr(Val), Name);
  }

  public static void DumpValue(ValueRef Val) {
    LLVMJNI.DumpValue(ValueRef.getCPtr(Val));
  }

  public static String PrintValueToString(ValueRef Val) {
    return LLVMJNI.PrintValueToString(ValueRef.getCPtr(Val));
  }

  public static void ReplaceAllUsesWith(ValueRef OldVal, ValueRef NewVal) {
    LLVMJNI.ReplaceAllUsesWith(ValueRef.getCPtr(OldVal), ValueRef.getCPtr(NewVal));
  }

  public static boolean IsConstant(ValueRef Val) {
    return LLVMJNI.IsConstant(ValueRef.getCPtr(Val));
  }

  public static boolean IsUndef(ValueRef Val) {
    return LLVMJNI.IsUndef(ValueRef.getCPtr(Val));
  }

  public static ValueRef IsAArgument(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAArgument(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsABasicBlock(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsABasicBlock(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAInlineAsm(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAInlineAsm(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAUser(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAUser(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstant(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstant(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsABlockAddress(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsABlockAddress(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantAggregateZero(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantAggregateZero(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantArray(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantArray(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantDataSequential(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantDataSequential(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantDataArray(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantDataArray(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantDataVector(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantDataVector(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantExpr(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantExpr(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantFP(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantFP(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantInt(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantInt(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantPointerNull(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantPointerNull(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantStruct(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantStruct(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantTokenNone(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantTokenNone(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAConstantVector(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAConstantVector(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAGlobalValue(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAGlobalValue(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAGlobalAlias(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAGlobalAlias(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAGlobalObject(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAGlobalObject(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFunction(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFunction(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAGlobalVariable(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAGlobalVariable(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAUndefValue(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAUndefValue(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAInstruction(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAInstruction(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsABinaryOperator(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsABinaryOperator(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACallInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACallInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAIntrinsicInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAIntrinsicInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsADbgInfoIntrinsic(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsADbgInfoIntrinsic(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsADbgDeclareInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsADbgDeclareInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMemIntrinsic(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMemIntrinsic(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMemCpyInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMemCpyInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMemMoveInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMemMoveInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMemSetInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMemSetInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACmpInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACmpInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFCmpInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFCmpInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAICmpInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAICmpInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAExtractElementInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAExtractElementInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAGetElementPtrInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAGetElementPtrInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAInsertElementInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAInsertElementInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAInsertValueInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAInsertValueInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsALandingPadInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsALandingPadInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAPHINode(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAPHINode(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsASelectInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsASelectInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAShuffleVectorInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAShuffleVectorInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAStoreInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAStoreInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsATerminatorInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsATerminatorInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsABranchInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsABranchInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAIndirectBrInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAIndirectBrInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAInvokeInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAInvokeInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAReturnInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAReturnInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsASwitchInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsASwitchInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAUnreachableInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAUnreachableInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAResumeInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAResumeInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACleanupReturnInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACleanupReturnInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACatchReturnInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACatchReturnInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFuncletPadInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFuncletPadInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACatchPadInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACatchPadInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACleanupPadInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACleanupPadInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAUnaryInstruction(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAUnaryInstruction(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAAllocaInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAAllocaInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsACastInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsACastInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAAddrSpaceCastInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAAddrSpaceCastInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsABitCastInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsABitCastInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFPExtInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFPExtInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFPToSIInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFPToSIInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFPToUIInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFPToUIInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAFPTruncInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAFPTruncInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAIntToPtrInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAIntToPtrInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAPtrToIntInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAPtrToIntInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsASExtInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsASExtInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsASIToFPInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsASIToFPInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsATruncInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsATruncInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAUIToFPInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAUIToFPInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAZExtInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAZExtInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAExtractValueInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAExtractValueInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsALoadInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsALoadInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAVAArgInst(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAVAArgInst(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMDNode(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMDNode(ValueRef.getCPtr(Val)), true);
  }

  public static ValueRef IsAMDString(ValueRef Val) {
    return new ValueRef(LLVMJNI.IsAMDString(ValueRef.getCPtr(Val)), true);
  }

  public static UseRef GetFirstUse(ValueRef Val) {
    return new UseRef(LLVMJNI.GetFirstUse(ValueRef.getCPtr(Val)), true);
  }

  public static UseRef GetNextUse(UseRef U) {
    return new UseRef(LLVMJNI.GetNextUse(UseRef.getCPtr(U)), true);
  }

  public static ValueRef GetUser(UseRef U) {
    return new ValueRef(LLVMJNI.GetUser(UseRef.getCPtr(U)), true);
  }

  public static ValueRef GetUsedValue(UseRef U) {
    return new ValueRef(LLVMJNI.GetUsedValue(UseRef.getCPtr(U)), true);
  }

  public static ValueRef GetOperand(ValueRef Val, int Index) {
    return new ValueRef(LLVMJNI.GetOperand(ValueRef.getCPtr(Val), Index), true);
  }

  public static UseRef GetOperandUse(ValueRef Val, int Index) {
    return new UseRef(LLVMJNI.GetOperandUse(ValueRef.getCPtr(Val), Index), true);
  }

  public static void SetOperand(ValueRef User, int Index, ValueRef Val) {
    LLVMJNI.SetOperand(ValueRef.getCPtr(User), Index, ValueRef.getCPtr(Val));
  }

  public static int GetNumOperands(ValueRef Val) {
    return LLVMJNI.GetNumOperands(ValueRef.getCPtr(Val));
  }

  public static ValueRef ConstNull(TypeRef Ty) {
    return new ValueRef(LLVMJNI.ConstNull(TypeRef.getCPtr(Ty)), true);
  }

  public static ValueRef ConstAllOnes(TypeRef Ty) {
    return new ValueRef(LLVMJNI.ConstAllOnes(TypeRef.getCPtr(Ty)), true);
  }

  public static ValueRef GetUndef(TypeRef Ty) {
    return new ValueRef(LLVMJNI.GetUndef(TypeRef.getCPtr(Ty)), true);
  }

  public static boolean IsNull(ValueRef Val) {
    return LLVMJNI.IsNull(ValueRef.getCPtr(Val));
  }

  public static ValueRef ConstPointerNull(TypeRef Ty) {
    return new ValueRef(LLVMJNI.ConstPointerNull(TypeRef.getCPtr(Ty)), true);
  }

  public static ValueRef ConstInt(TypeRef IntTy, java.math.BigInteger N, boolean SignExtend) {
    return new ValueRef(LLVMJNI.ConstInt(TypeRef.getCPtr(IntTy), N, SignExtend), true);
  }

  public static ValueRef ConstIntOfArbitraryPrecision(TypeRef IntTy, int NumWords, LongArray Words) {
    return new ValueRef(LLVMJNI.ConstIntOfArbitraryPrecision(TypeRef.getCPtr(IntTy), NumWords, LongArray.getCPtr(Words), Words), true);
  }

  public static ValueRef ConstIntOfString(TypeRef IntTy, String Text, byte Radix) {
    return new ValueRef(LLVMJNI.ConstIntOfString(TypeRef.getCPtr(IntTy), Text, Radix), true);
  }

  public static ValueRef ConstReal(TypeRef RealTy, double N) {
    return new ValueRef(LLVMJNI.ConstReal(TypeRef.getCPtr(RealTy), N), true);
  }

  public static ValueRef ConstRealOfString(TypeRef RealTy, String Text) {
    return new ValueRef(LLVMJNI.ConstRealOfString(TypeRef.getCPtr(RealTy), Text), true);
  }

  public static java.math.BigInteger ConstIntGetZExtValue(ValueRef ConstantVal) {
    return LLVMJNI.ConstIntGetZExtValue(ValueRef.getCPtr(ConstantVal));
  }

  public static long ConstIntGetSExtValue(ValueRef ConstantVal) {
    return LLVMJNI.ConstIntGetSExtValue(ValueRef.getCPtr(ConstantVal));
  }

  public static double ConstRealGetDouble(ValueRef ConstantVal, IntOut losesInfo) {
    return LLVMJNI.ConstRealGetDouble(ValueRef.getCPtr(ConstantVal), IntOut.getCPtr(losesInfo), losesInfo);
  }

  public static ValueRef ConstStringInContext(ContextRef C, String Str, boolean DontNullTerminate) {
    return new ValueRef(LLVMJNI.ConstStringInContext(ContextRef.getCPtr(C), Str, DontNullTerminate), true);
  }

  public static ValueRef ConstString(String Str, boolean DontNullTerminate) {
    return new ValueRef(LLVMJNI.ConstString(Str, DontNullTerminate), true);
  }

  public static boolean IsConstantString(ValueRef c) {
    return LLVMJNI.IsConstantString(ValueRef.getCPtr(c));
  }

  public static String GetAsString(ValueRef c, SWIGTYPE_p_size_t Length) {
    return LLVMJNI.GetAsString(ValueRef.getCPtr(c), SWIGTYPE_p_size_t.getCPtr(Length));
  }

  public static ValueRef ConstStructInContext(ContextRef C, ValueRefArray ConstantVals, int Count, boolean Packed) {
    return new ValueRef(LLVMJNI.ConstStructInContext(ContextRef.getCPtr(C), ValueRefArray.getCPtr(ConstantVals), ConstantVals, Count, Packed), true);
  }

  public static ValueRef ConstStruct(ValueRefArray ConstantVals, int Count, boolean Packed) {
    return new ValueRef(LLVMJNI.ConstStruct(ValueRefArray.getCPtr(ConstantVals), ConstantVals, Count, Packed), true);
  }

  public static ValueRef ConstArray(TypeRef ElementTy, ValueRefArray ConstantVals, int Length) {
    return new ValueRef(LLVMJNI.ConstArray(TypeRef.getCPtr(ElementTy), ValueRefArray.getCPtr(ConstantVals), ConstantVals, Length), true);
  }

  public static ValueRef ConstNamedStruct(TypeRef StructTy, ValueRefArray ConstantVals, int Count) {
    return new ValueRef(LLVMJNI.ConstNamedStruct(TypeRef.getCPtr(StructTy), ValueRefArray.getCPtr(ConstantVals), ConstantVals, Count), true);
  }

  public static ValueRef GetElementAsConstant(ValueRef C, int idx) {
    return new ValueRef(LLVMJNI.GetElementAsConstant(ValueRef.getCPtr(C), idx), true);
  }

  public static ValueRef ConstVector(ValueRefArray ScalarConstantVals, int Size) {
    return new ValueRef(LLVMJNI.ConstVector(ValueRefArray.getCPtr(ScalarConstantVals), ScalarConstantVals, Size), true);
  }

  public static Opcode GetConstOpcode(ValueRef ConstantVal) {
    return Opcode.swigToEnum(LLVMJNI.GetConstOpcode(ValueRef.getCPtr(ConstantVal)));
  }

  public static ValueRef AlignOf(TypeRef Ty) {
    return new ValueRef(LLVMJNI.AlignOf(TypeRef.getCPtr(Ty)), true);
  }

  public static ValueRef SizeOf(TypeRef Ty) {
    return new ValueRef(LLVMJNI.SizeOf(TypeRef.getCPtr(Ty)), true);
  }

  public static ValueRef ConstNeg(ValueRef ConstantVal) {
    return new ValueRef(LLVMJNI.ConstNeg(ValueRef.getCPtr(ConstantVal)), true);
  }

  public static ValueRef ConstNSWNeg(ValueRef ConstantVal) {
    return new ValueRef(LLVMJNI.ConstNSWNeg(ValueRef.getCPtr(ConstantVal)), true);
  }

  public static ValueRef ConstNUWNeg(ValueRef ConstantVal) {
    return new ValueRef(LLVMJNI.ConstNUWNeg(ValueRef.getCPtr(ConstantVal)), true);
  }

  public static ValueRef ConstFNeg(ValueRef ConstantVal) {
    return new ValueRef(LLVMJNI.ConstFNeg(ValueRef.getCPtr(ConstantVal)), true);
  }

  public static ValueRef ConstNot(ValueRef ConstantVal) {
    return new ValueRef(LLVMJNI.ConstNot(ValueRef.getCPtr(ConstantVal)), true);
  }

  public static ValueRef ConstAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstAdd(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNSWAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNSWAdd(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNUWAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNUWAdd(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFAdd(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstSub(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstSub(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNSWSub(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNSWSub(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNUWSub(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNUWSub(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFSub(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFSub(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstMul(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstMul(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNSWMul(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNSWMul(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstNUWMul(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstNUWMul(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFMul(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFMul(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstUDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstUDiv(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstSDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstSDiv(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstExactSDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstExactSDiv(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFDiv(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstURem(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstURem(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstSRem(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstSRem(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFRem(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFRem(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstAnd(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstAnd(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstOr(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstOr(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstXor(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstXor(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstICmp(IntPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstICmp(Predicate.swigValue(), ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstFCmp(RealPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstFCmp(Predicate.swigValue(), ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstShl(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstShl(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstLShr(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstLShr(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstAShr(ValueRef LHSConstant, ValueRef RHSConstant) {
    return new ValueRef(LLVMJNI.ConstAShr(ValueRef.getCPtr(LHSConstant), ValueRef.getCPtr(RHSConstant)), true);
  }

  public static ValueRef ConstGEP(ValueRef ConstantVal, ValueRefArray ConstantIndices, int NumIndices) {
    return new ValueRef(LLVMJNI.ConstGEP(ValueRef.getCPtr(ConstantVal), ValueRefArray.getCPtr(ConstantIndices), ConstantIndices, NumIndices), true);
  }

  public static ValueRef ConstInBoundsGEP(ValueRef ConstantVal, ValueRefArray ConstantIndices, int NumIndices) {
    return new ValueRef(LLVMJNI.ConstInBoundsGEP(ValueRef.getCPtr(ConstantVal), ValueRefArray.getCPtr(ConstantIndices), ConstantIndices, NumIndices), true);
  }

  public static ValueRef ConstTrunc(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstTrunc(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstSExt(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstSExt(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstZExt(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstZExt(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstFPTrunc(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstFPTrunc(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstFPExt(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstFPExt(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstUIToFP(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstUIToFP(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstSIToFP(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstSIToFP(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstFPToUI(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstFPToUI(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstFPToSI(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstFPToSI(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstPtrToInt(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstPtrToInt(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstIntToPtr(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstIntToPtr(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstBitCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstBitCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstAddrSpaceCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstAddrSpaceCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstZExtOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstZExtOrBitCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstSExtOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstSExtOrBitCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstTruncOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstTruncOrBitCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstPointerCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstPointerCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstIntCast(ValueRef ConstantVal, TypeRef ToType, boolean isSigned) {
    return new ValueRef(LLVMJNI.ConstIntCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType), isSigned), true);
  }

  public static ValueRef ConstFPCast(ValueRef ConstantVal, TypeRef ToType) {
    return new ValueRef(LLVMJNI.ConstFPCast(ValueRef.getCPtr(ConstantVal), TypeRef.getCPtr(ToType)), true);
  }

  public static ValueRef ConstSelect(ValueRef ConstantCondition, ValueRef ConstantIfTrue, ValueRef ConstantIfFalse) {
    return new ValueRef(LLVMJNI.ConstSelect(ValueRef.getCPtr(ConstantCondition), ValueRef.getCPtr(ConstantIfTrue), ValueRef.getCPtr(ConstantIfFalse)), true);
  }

  public static ValueRef ConstExtractElement(ValueRef VectorConstant, ValueRef IndexConstant) {
    return new ValueRef(LLVMJNI.ConstExtractElement(ValueRef.getCPtr(VectorConstant), ValueRef.getCPtr(IndexConstant)), true);
  }

  public static ValueRef ConstInsertElement(ValueRef VectorConstant, ValueRef ElementValueConstant, ValueRef IndexConstant) {
    return new ValueRef(LLVMJNI.ConstInsertElement(ValueRef.getCPtr(VectorConstant), ValueRef.getCPtr(ElementValueConstant), ValueRef.getCPtr(IndexConstant)), true);
  }

  public static ValueRef ConstShuffleVector(ValueRef VectorAConstant, ValueRef VectorBConstant, ValueRef MaskConstant) {
    return new ValueRef(LLVMJNI.ConstShuffleVector(ValueRef.getCPtr(VectorAConstant), ValueRef.getCPtr(VectorBConstant), ValueRef.getCPtr(MaskConstant)), true);
  }

  public static ValueRef ConstExtractValue(ValueRef AggConstant, IntArray IdxList, int NumIdx) {
    return new ValueRef(LLVMJNI.ConstExtractValue(ValueRef.getCPtr(AggConstant), IntArray.getCPtr(IdxList), IdxList, NumIdx), true);
  }

  public static ValueRef ConstInsertValue(ValueRef AggConstant, ValueRef ElementValueConstant, IntArray IdxList, int NumIdx) {
    return new ValueRef(LLVMJNI.ConstInsertValue(ValueRef.getCPtr(AggConstant), ValueRef.getCPtr(ElementValueConstant), IntArray.getCPtr(IdxList), IdxList, NumIdx), true);
  }

  public static ValueRef ConstInlineAsm(TypeRef Ty, String AsmString, String Constraints, boolean HasSideEffects, boolean IsAlignStack) {
    return new ValueRef(LLVMJNI.ConstInlineAsm(TypeRef.getCPtr(Ty), AsmString, Constraints, HasSideEffects, IsAlignStack), true);
  }

  public static ValueRef BlockAddress(ValueRef F, BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.BlockAddress(ValueRef.getCPtr(F), BasicBlockRef.getCPtr(BB)), true);
  }

  public static ModuleRef GetGlobalParent(ValueRef Global) {
    return new ModuleRef(LLVMJNI.GetGlobalParent(ValueRef.getCPtr(Global)), true);
  }

  public static boolean IsDeclaration(ValueRef Global) {
    return LLVMJNI.IsDeclaration(ValueRef.getCPtr(Global));
  }

  public static Linkage GetLinkage(ValueRef Global) {
    return Linkage.swigToEnum(LLVMJNI.GetLinkage(ValueRef.getCPtr(Global)));
  }

  public static void SetLinkage(ValueRef Global, Linkage Linkage) {
    LLVMJNI.SetLinkage(ValueRef.getCPtr(Global), Linkage.swigValue());
  }

  public static String GetSection(ValueRef Global) {
    return LLVMJNI.GetSection(ValueRef.getCPtr(Global));
  }

  public static void SetSection(ValueRef Global, String Section) {
    LLVMJNI.SetSection(ValueRef.getCPtr(Global), Section);
  }

  public static Visibility GetVisibility(ValueRef Global) {
    return Visibility.swigToEnum(LLVMJNI.GetVisibility(ValueRef.getCPtr(Global)));
  }

  public static void SetVisibility(ValueRef Global, Visibility Viz) {
    LLVMJNI.SetVisibility(ValueRef.getCPtr(Global), Viz.swigValue());
  }

  public static DLLStorageClass GetDLLStorageClass(ValueRef Global) {
    return DLLStorageClass.swigToEnum(LLVMJNI.GetDLLStorageClass(ValueRef.getCPtr(Global)));
  }

  public static void SetDLLStorageClass(ValueRef Global, DLLStorageClass Class) {
    LLVMJNI.SetDLLStorageClass(ValueRef.getCPtr(Global), Class.swigValue());
  }

  public static boolean HasUnnamedAddr(ValueRef Global) {
    return LLVMJNI.HasUnnamedAddr(ValueRef.getCPtr(Global));
  }

  public static void SetUnnamedAddr(ValueRef Global, boolean HasUnnamedAddr) {
    LLVMJNI.SetUnnamedAddr(ValueRef.getCPtr(Global), HasUnnamedAddr);
  }

  public static int GetAlignment(ValueRef V) {
    return LLVMJNI.GetAlignment(ValueRef.getCPtr(V));
  }

  public static void SetAlignment(ValueRef V, int Bytes) {
    LLVMJNI.SetAlignment(ValueRef.getCPtr(V), Bytes);
  }

  public static ValueRef AddGlobal(ModuleRef M, TypeRef Ty, String Name) {
    return new ValueRef(LLVMJNI.AddGlobal(ModuleRef.getCPtr(M), TypeRef.getCPtr(Ty), Name), true);
  }

  public static ValueRef AddGlobalInAddressSpace(ModuleRef M, TypeRef Ty, String Name, int AddressSpace) {
    return new ValueRef(LLVMJNI.AddGlobalInAddressSpace(ModuleRef.getCPtr(M), TypeRef.getCPtr(Ty), Name, AddressSpace), true);
  }

  public static ValueRef GetNamedGlobal(ModuleRef M, String Name) {
    return new ValueRef(LLVMJNI.GetNamedGlobal(ModuleRef.getCPtr(M), Name), true);
  }

  public static ValueRef GetFirstGlobal(ModuleRef M) {
    return new ValueRef(LLVMJNI.GetFirstGlobal(ModuleRef.getCPtr(M)), true);
  }

  public static ValueRef GetLastGlobal(ModuleRef M) {
    return new ValueRef(LLVMJNI.GetLastGlobal(ModuleRef.getCPtr(M)), true);
  }

  public static ValueRef GetNextGlobal(ValueRef GlobalVar) {
    return new ValueRef(LLVMJNI.GetNextGlobal(ValueRef.getCPtr(GlobalVar)), true);
  }

  public static ValueRef GetPreviousGlobal(ValueRef GlobalVar) {
    return new ValueRef(LLVMJNI.GetPreviousGlobal(ValueRef.getCPtr(GlobalVar)), true);
  }

  public static void DeleteGlobal(ValueRef GlobalVar) {
    LLVMJNI.DeleteGlobal(ValueRef.getCPtr(GlobalVar));
  }

  public static ValueRef GetInitializer(ValueRef GlobalVar) {
    return new ValueRef(LLVMJNI.GetInitializer(ValueRef.getCPtr(GlobalVar)), true);
  }

  public static void SetInitializer(ValueRef GlobalVar, ValueRef ConstantVal) {
    LLVMJNI.SetInitializer(ValueRef.getCPtr(GlobalVar), ValueRef.getCPtr(ConstantVal));
  }

  public static boolean IsThreadLocal(ValueRef GlobalVar) {
    return LLVMJNI.IsThreadLocal(ValueRef.getCPtr(GlobalVar));
  }

  public static void SetThreadLocal(ValueRef GlobalVar, boolean IsThreadLocal) {
    LLVMJNI.SetThreadLocal(ValueRef.getCPtr(GlobalVar), IsThreadLocal);
  }

  public static boolean IsGlobalConstant(ValueRef GlobalVar) {
    return LLVMJNI.IsGlobalConstant(ValueRef.getCPtr(GlobalVar));
  }

  public static void SetGlobalConstant(ValueRef GlobalVar, boolean IsConstant) {
    LLVMJNI.SetGlobalConstant(ValueRef.getCPtr(GlobalVar), IsConstant);
  }

  public static ThreadLocalMode GetThreadLocalMode(ValueRef GlobalVar) {
    return ThreadLocalMode.swigToEnum(LLVMJNI.GetThreadLocalMode(ValueRef.getCPtr(GlobalVar)));
  }

  public static void SetThreadLocalMode(ValueRef GlobalVar, ThreadLocalMode Mode) {
    LLVMJNI.SetThreadLocalMode(ValueRef.getCPtr(GlobalVar), Mode.swigValue());
  }

  public static boolean IsExternallyInitialized(ValueRef GlobalVar) {
    return LLVMJNI.IsExternallyInitialized(ValueRef.getCPtr(GlobalVar));
  }

  public static void SetExternallyInitialized(ValueRef GlobalVar, boolean IsExtInit) {
    LLVMJNI.SetExternallyInitialized(ValueRef.getCPtr(GlobalVar), IsExtInit);
  }

  public static ValueRef AddAlias(ModuleRef M, TypeRef Ty, ValueRef Aliasee, String Name) {
    return new ValueRef(LLVMJNI.AddAlias(ModuleRef.getCPtr(M), TypeRef.getCPtr(Ty), ValueRef.getCPtr(Aliasee), Name), true);
  }

  public static void DeleteFunction(ValueRef Fn) {
    LLVMJNI.DeleteFunction(ValueRef.getCPtr(Fn));
  }

  public static boolean HasPersonalityFn(ValueRef Fn) {
    return LLVMJNI.HasPersonalityFn(ValueRef.getCPtr(Fn));
  }

  public static ValueRef GetPersonalityFn(ValueRef Fn) {
    return new ValueRef(LLVMJNI.GetPersonalityFn(ValueRef.getCPtr(Fn)), true);
  }

  public static void SetPersonalityFn(ValueRef Fn, ValueRef PersonalityFn) {
    LLVMJNI.SetPersonalityFn(ValueRef.getCPtr(Fn), ValueRef.getCPtr(PersonalityFn));
  }

  public static int GetIntrinsicID(ValueRef Fn) {
    return LLVMJNI.GetIntrinsicID(ValueRef.getCPtr(Fn));
  }

  public static int GetFunctionCallConv(ValueRef Fn) {
    return LLVMJNI.GetFunctionCallConv(ValueRef.getCPtr(Fn));
  }

  public static void SetFunctionCallConv(ValueRef Fn, int CC) {
    LLVMJNI.SetFunctionCallConv(ValueRef.getCPtr(Fn), CC);
  }

  public static String GetGC(ValueRef Fn) {
    return LLVMJNI.GetGC(ValueRef.getCPtr(Fn));
  }

  public static void SetGC(ValueRef Fn, String Name) {
    LLVMJNI.SetGC(ValueRef.getCPtr(Fn), Name);
  }

  public static void AddFunctionAttr(ValueRef Fn, int PA) {
    LLVMJNI.AddFunctionAttr(ValueRef.getCPtr(Fn), PA);
  }

  public static void AddAttributeAtIndex(ValueRef F, int Idx, SWIGTYPE_p_LLVMAttributeRef A) {
    LLVMJNI.AddAttributeAtIndex(ValueRef.getCPtr(F), Idx, SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static int GetAttributeCountAtIndex(ValueRef F, int Idx) {
    return LLVMJNI.GetAttributeCountAtIndex(ValueRef.getCPtr(F), Idx);
  }

  public static void GetAttributesAtIndex(ValueRef F, int Idx, SWIGTYPE_p_LLVMAttributeRef Attrs) {
    LLVMJNI.GetAttributesAtIndex(ValueRef.getCPtr(F), Idx, SWIGTYPE_p_LLVMAttributeRef.getCPtr(Attrs));
  }

  public static SWIGTYPE_p_LLVMAttributeRef GetEnumAttributeAtIndex(ValueRef F, int Idx, int KindID) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.GetEnumAttributeAtIndex(ValueRef.getCPtr(F), Idx, KindID), true);
  }

  public static SWIGTYPE_p_LLVMAttributeRef GetStringAttributeAtIndex(ValueRef F, int Idx, String K, int KLen) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.GetStringAttributeAtIndex(ValueRef.getCPtr(F), Idx, K, KLen), true);
  }

  public static void RemoveEnumAttributeAtIndex(ValueRef F, int Idx, int KindID) {
    LLVMJNI.RemoveEnumAttributeAtIndex(ValueRef.getCPtr(F), Idx, KindID);
  }

  public static void RemoveStringAttributeAtIndex(ValueRef F, int Idx, String K, int KLen) {
    LLVMJNI.RemoveStringAttributeAtIndex(ValueRef.getCPtr(F), Idx, K, KLen);
  }

  public static void AddTargetDependentFunctionAttr(ValueRef Fn, String A, String V) {
    LLVMJNI.AddTargetDependentFunctionAttr(ValueRef.getCPtr(Fn), A, V);
  }

  public static int GetFunctionAttr(ValueRef Fn) {
    return LLVMJNI.GetFunctionAttr(ValueRef.getCPtr(Fn));
  }

  public static void RemoveFunctionAttr(ValueRef Fn, int PA) {
    LLVMJNI.RemoveFunctionAttr(ValueRef.getCPtr(Fn), PA);
  }

  public static int CountParams(ValueRef Fn) {
    return LLVMJNI.CountParams(ValueRef.getCPtr(Fn));
  }

  public static void GetParams(ValueRef Fn, ValueRefArray Params) {
    LLVMJNI.GetParams(ValueRef.getCPtr(Fn), ValueRefArray.getCPtr(Params), Params);
  }

  public static ValueRef GetParam(ValueRef Fn, int Index) {
    return new ValueRef(LLVMJNI.GetParam(ValueRef.getCPtr(Fn), Index), true);
  }

  public static ValueRef GetParamParent(ValueRef Inst) {
    return new ValueRef(LLVMJNI.GetParamParent(ValueRef.getCPtr(Inst)), true);
  }

  public static ValueRef GetFirstParam(ValueRef Fn) {
    return new ValueRef(LLVMJNI.GetFirstParam(ValueRef.getCPtr(Fn)), true);
  }

  public static ValueRef GetLastParam(ValueRef Fn) {
    return new ValueRef(LLVMJNI.GetLastParam(ValueRef.getCPtr(Fn)), true);
  }

  public static ValueRef GetNextParam(ValueRef Arg) {
    return new ValueRef(LLVMJNI.GetNextParam(ValueRef.getCPtr(Arg)), true);
  }

  public static ValueRef GetPreviousParam(ValueRef Arg) {
    return new ValueRef(LLVMJNI.GetPreviousParam(ValueRef.getCPtr(Arg)), true);
  }

  public static void AddAttribute(ValueRef Arg, int PA) {
    LLVMJNI.AddAttribute(ValueRef.getCPtr(Arg), PA);
  }

  public static void RemoveAttribute(ValueRef Arg, int PA) {
    LLVMJNI.RemoveAttribute(ValueRef.getCPtr(Arg), PA);
  }

  public static int GetAttribute(ValueRef Arg) {
    return LLVMJNI.GetAttribute(ValueRef.getCPtr(Arg));
  }

  public static void SetParamAlignment(ValueRef Arg, int Align) {
    LLVMJNI.SetParamAlignment(ValueRef.getCPtr(Arg), Align);
  }

  public static ValueRef MDStringInContext(ContextRef C, String Str) {
    return new ValueRef(LLVMJNI.MDStringInContext(ContextRef.getCPtr(C), Str), true);
  }

  public static ValueRef MDString(String Str) {
    return new ValueRef(LLVMJNI.MDString(Str), true);
  }

  public static ValueRef MDNodeInContext(ContextRef C, ValueRefArray Vals, int Count) {
    return new ValueRef(LLVMJNI.MDNodeInContext(ContextRef.getCPtr(C), ValueRefArray.getCPtr(Vals), Vals, Count), true);
  }

  public static ValueRef MDNode(ValueRefArray Vals, int Count) {
    return new ValueRef(LLVMJNI.MDNode(ValueRefArray.getCPtr(Vals), Vals, Count), true);
  }

  public static String GetMDString(ValueRef V, SWIGTYPE_p_unsigned_int Length) {
    return LLVMJNI.GetMDString(ValueRef.getCPtr(V), SWIGTYPE_p_unsigned_int.getCPtr(Length));
  }

  public static int GetMDNodeNumOperands(ValueRef V) {
    return LLVMJNI.GetMDNodeNumOperands(ValueRef.getCPtr(V));
  }

  public static void GetMDNodeOperands(ValueRef V, ValueRefArray Dest) {
    LLVMJNI.GetMDNodeOperands(ValueRef.getCPtr(V), ValueRefArray.getCPtr(Dest), Dest);
  }

  public static ValueRef BasicBlockAsValue(BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.BasicBlockAsValue(BasicBlockRef.getCPtr(BB)), true);
  }

  public static boolean ValueIsBasicBlock(ValueRef Val) {
    return LLVMJNI.ValueIsBasicBlock(ValueRef.getCPtr(Val));
  }

  public static BasicBlockRef ValueAsBasicBlock(ValueRef Val) {
    return new BasicBlockRef(LLVMJNI.ValueAsBasicBlock(ValueRef.getCPtr(Val)), true);
  }

  public static String GetBasicBlockName(BasicBlockRef BB) {
    return LLVMJNI.GetBasicBlockName(BasicBlockRef.getCPtr(BB));
  }

  public static ValueRef GetBasicBlockParent(BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.GetBasicBlockParent(BasicBlockRef.getCPtr(BB)), true);
  }

  public static ValueRef GetBasicBlockTerminator(BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.GetBasicBlockTerminator(BasicBlockRef.getCPtr(BB)), true);
  }

  public static int CountBasicBlocks(ValueRef Fn) {
    return LLVMJNI.CountBasicBlocks(ValueRef.getCPtr(Fn));
  }

  public static void GetBasicBlocks(ValueRef Fn, BasicBlockRefArray BasicBlocks) {
    LLVMJNI.GetBasicBlocks(ValueRef.getCPtr(Fn), BasicBlockRefArray.getCPtr(BasicBlocks), BasicBlocks);
  }

  public static BasicBlockRef GetFirstBasicBlock(ValueRef Fn) {
    return new BasicBlockRef(LLVMJNI.GetFirstBasicBlock(ValueRef.getCPtr(Fn)), true);
  }

  public static BasicBlockRef GetLastBasicBlock(ValueRef Fn) {
    return new BasicBlockRef(LLVMJNI.GetLastBasicBlock(ValueRef.getCPtr(Fn)), true);
  }

  public static BasicBlockRef GetNextBasicBlock(BasicBlockRef BB) {
    return new BasicBlockRef(LLVMJNI.GetNextBasicBlock(BasicBlockRef.getCPtr(BB)), true);
  }

  public static BasicBlockRef GetPreviousBasicBlock(BasicBlockRef BB) {
    return new BasicBlockRef(LLVMJNI.GetPreviousBasicBlock(BasicBlockRef.getCPtr(BB)), true);
  }

  public static BasicBlockRef GetEntryBasicBlock(ValueRef Fn) {
    return new BasicBlockRef(LLVMJNI.GetEntryBasicBlock(ValueRef.getCPtr(Fn)), true);
  }

  public static BasicBlockRef AppendBasicBlockInContext(ContextRef C, ValueRef Fn, String Name) {
    return new BasicBlockRef(LLVMJNI.AppendBasicBlockInContext(ContextRef.getCPtr(C), ValueRef.getCPtr(Fn), Name), true);
  }

  public static BasicBlockRef AppendBasicBlock(ValueRef Fn, String Name) {
    return new BasicBlockRef(LLVMJNI.AppendBasicBlock(ValueRef.getCPtr(Fn), Name), true);
  }

  public static BasicBlockRef InsertBasicBlockInContext(ContextRef C, BasicBlockRef BB, String Name) {
    return new BasicBlockRef(LLVMJNI.InsertBasicBlockInContext(ContextRef.getCPtr(C), BasicBlockRef.getCPtr(BB), Name), true);
  }

  public static BasicBlockRef InsertBasicBlock(BasicBlockRef InsertBeforeBB, String Name) {
    return new BasicBlockRef(LLVMJNI.InsertBasicBlock(BasicBlockRef.getCPtr(InsertBeforeBB), Name), true);
  }

  public static void DeleteBasicBlock(BasicBlockRef BB) {
    LLVMJNI.DeleteBasicBlock(BasicBlockRef.getCPtr(BB));
  }

  public static void RemoveBasicBlockFromParent(BasicBlockRef BB) {
    LLVMJNI.RemoveBasicBlockFromParent(BasicBlockRef.getCPtr(BB));
  }

  public static void MoveBasicBlockBefore(BasicBlockRef BB, BasicBlockRef MovePos) {
    LLVMJNI.MoveBasicBlockBefore(BasicBlockRef.getCPtr(BB), BasicBlockRef.getCPtr(MovePos));
  }

  public static void MoveBasicBlockAfter(BasicBlockRef BB, BasicBlockRef MovePos) {
    LLVMJNI.MoveBasicBlockAfter(BasicBlockRef.getCPtr(BB), BasicBlockRef.getCPtr(MovePos));
  }

  public static ValueRef GetFirstInstruction(BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.GetFirstInstruction(BasicBlockRef.getCPtr(BB)), true);
  }

  public static ValueRef GetLastInstruction(BasicBlockRef BB) {
    return new ValueRef(LLVMJNI.GetLastInstruction(BasicBlockRef.getCPtr(BB)), true);
  }

  public static int HasMetadata(ValueRef Val) {
    return LLVMJNI.HasMetadata(ValueRef.getCPtr(Val));
  }

  public static ValueRef GetMetadata(ValueRef Val, int KindID) {
    return new ValueRef(LLVMJNI.GetMetadata(ValueRef.getCPtr(Val), KindID), true);
  }

  public static void SetMetadata(ValueRef Val, int KindID, ValueRef Node) {
    LLVMJNI.SetMetadata(ValueRef.getCPtr(Val), KindID, ValueRef.getCPtr(Node));
  }

  public static BasicBlockRef GetInstructionParent(ValueRef Inst) {
    return new BasicBlockRef(LLVMJNI.GetInstructionParent(ValueRef.getCPtr(Inst)), true);
  }

  public static ValueRef GetNextInstruction(ValueRef Inst) {
    return new ValueRef(LLVMJNI.GetNextInstruction(ValueRef.getCPtr(Inst)), true);
  }

  public static ValueRef GetPreviousInstruction(ValueRef Inst) {
    return new ValueRef(LLVMJNI.GetPreviousInstruction(ValueRef.getCPtr(Inst)), true);
  }

  public static void InstructionRemoveFromParent(ValueRef Inst) {
    LLVMJNI.InstructionRemoveFromParent(ValueRef.getCPtr(Inst));
  }

  public static void InstructionEraseFromParent(ValueRef Inst) {
    LLVMJNI.InstructionEraseFromParent(ValueRef.getCPtr(Inst));
  }

  public static Opcode GetInstructionOpcode(ValueRef Inst) {
    return Opcode.swigToEnum(LLVMJNI.GetInstructionOpcode(ValueRef.getCPtr(Inst)));
  }

  public static IntPredicate GetICmpPredicate(ValueRef Inst) {
    return IntPredicate.swigToEnum(LLVMJNI.GetICmpPredicate(ValueRef.getCPtr(Inst)));
  }

  public static RealPredicate GetFCmpPredicate(ValueRef Inst) {
    return RealPredicate.swigToEnum(LLVMJNI.GetFCmpPredicate(ValueRef.getCPtr(Inst)));
  }

  public static ValueRef InstructionClone(ValueRef Inst) {
    return new ValueRef(LLVMJNI.InstructionClone(ValueRef.getCPtr(Inst)), true);
  }

  public static int GetNumArgOperands(ValueRef Instr) {
    return LLVMJNI.GetNumArgOperands(ValueRef.getCPtr(Instr));
  }

  public static void SetInstructionCallConv(ValueRef Instr, int CC) {
    LLVMJNI.SetInstructionCallConv(ValueRef.getCPtr(Instr), CC);
  }

  public static int GetInstructionCallConv(ValueRef Instr) {
    return LLVMJNI.GetInstructionCallConv(ValueRef.getCPtr(Instr));
  }

  public static void AddInstrAttribute(ValueRef Instr, int index, int arg2) {
    LLVMJNI.AddInstrAttribute(ValueRef.getCPtr(Instr), index, arg2);
  }

  public static void RemoveInstrAttribute(ValueRef Instr, int index, int arg2) {
    LLVMJNI.RemoveInstrAttribute(ValueRef.getCPtr(Instr), index, arg2);
  }

  public static void SetInstrParamAlignment(ValueRef Instr, int index, int Align) {
    LLVMJNI.SetInstrParamAlignment(ValueRef.getCPtr(Instr), index, Align);
  }

  public static void AddCallSiteAttribute(ValueRef C, int Idx, SWIGTYPE_p_LLVMAttributeRef A) {
    LLVMJNI.AddCallSiteAttribute(ValueRef.getCPtr(C), Idx, SWIGTYPE_p_LLVMAttributeRef.getCPtr(A));
  }

  public static int GetCallSiteAttributeCount(ValueRef C, int Idx) {
    return LLVMJNI.GetCallSiteAttributeCount(ValueRef.getCPtr(C), Idx);
  }

  public static void GetCallSiteAttributes(ValueRef C, int Idx, SWIGTYPE_p_LLVMAttributeRef Attrs) {
    LLVMJNI.GetCallSiteAttributes(ValueRef.getCPtr(C), Idx, SWIGTYPE_p_LLVMAttributeRef.getCPtr(Attrs));
  }

  public static SWIGTYPE_p_LLVMAttributeRef GetCallSiteEnumAttribute(ValueRef C, int Idx, int KindID) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.GetCallSiteEnumAttribute(ValueRef.getCPtr(C), Idx, KindID), true);
  }

  public static SWIGTYPE_p_LLVMAttributeRef GetCallSiteStringAttribute(ValueRef C, int Idx, String K, int KLen) {
    return new SWIGTYPE_p_LLVMAttributeRef(LLVMJNI.GetCallSiteStringAttribute(ValueRef.getCPtr(C), Idx, K, KLen), true);
  }

  public static void RemoveCallSiteEnumAttribute(ValueRef C, int Idx, int KindID) {
    LLVMJNI.RemoveCallSiteEnumAttribute(ValueRef.getCPtr(C), Idx, KindID);
  }

  public static void RemoveCallSiteStringAttribute(ValueRef C, int Idx, String K, int KLen) {
    LLVMJNI.RemoveCallSiteStringAttribute(ValueRef.getCPtr(C), Idx, K, KLen);
  }

  public static ValueRef GetCalledValue(ValueRef Instr) {
    return new ValueRef(LLVMJNI.GetCalledValue(ValueRef.getCPtr(Instr)), true);
  }

  public static boolean IsTailCall(ValueRef CallInst) {
    return LLVMJNI.IsTailCall(ValueRef.getCPtr(CallInst));
  }

  public static void SetTailCall(ValueRef CallInst, boolean IsTailCall) {
    LLVMJNI.SetTailCall(ValueRef.getCPtr(CallInst), IsTailCall);
  }

  public static BasicBlockRef GetNormalDest(ValueRef InvokeInst) {
    return new BasicBlockRef(LLVMJNI.GetNormalDest(ValueRef.getCPtr(InvokeInst)), true);
  }

  public static BasicBlockRef GetUnwindDest(ValueRef InvokeInst) {
    return new BasicBlockRef(LLVMJNI.GetUnwindDest(ValueRef.getCPtr(InvokeInst)), true);
  }

  public static void SetNormalDest(ValueRef InvokeInst, BasicBlockRef B) {
    LLVMJNI.SetNormalDest(ValueRef.getCPtr(InvokeInst), BasicBlockRef.getCPtr(B));
  }

  public static void SetUnwindDest(ValueRef InvokeInst, BasicBlockRef B) {
    LLVMJNI.SetUnwindDest(ValueRef.getCPtr(InvokeInst), BasicBlockRef.getCPtr(B));
  }

  public static int GetNumSuccessors(ValueRef Term) {
    return LLVMJNI.GetNumSuccessors(ValueRef.getCPtr(Term));
  }

  public static BasicBlockRef GetSuccessor(ValueRef Term, int i) {
    return new BasicBlockRef(LLVMJNI.GetSuccessor(ValueRef.getCPtr(Term), i), true);
  }

  public static void SetSuccessor(ValueRef Term, int i, BasicBlockRef block) {
    LLVMJNI.SetSuccessor(ValueRef.getCPtr(Term), i, BasicBlockRef.getCPtr(block));
  }

  public static boolean IsConditional(ValueRef Branch) {
    return LLVMJNI.IsConditional(ValueRef.getCPtr(Branch));
  }

  public static ValueRef GetCondition(ValueRef Branch) {
    return new ValueRef(LLVMJNI.GetCondition(ValueRef.getCPtr(Branch)), true);
  }

  public static void SetCondition(ValueRef Branch, ValueRef Cond) {
    LLVMJNI.SetCondition(ValueRef.getCPtr(Branch), ValueRef.getCPtr(Cond));
  }

  public static BasicBlockRef GetSwitchDefaultDest(ValueRef SwitchInstr) {
    return new BasicBlockRef(LLVMJNI.GetSwitchDefaultDest(ValueRef.getCPtr(SwitchInstr)), true);
  }

  public static TypeRef GetAllocatedType(ValueRef Alloca) {
    return new TypeRef(LLVMJNI.GetAllocatedType(ValueRef.getCPtr(Alloca)), true);
  }

  public static boolean IsInBounds(ValueRef GEP) {
    return LLVMJNI.IsInBounds(ValueRef.getCPtr(GEP));
  }

  public static void SetIsInBounds(ValueRef GEP, boolean InBounds) {
    LLVMJNI.SetIsInBounds(ValueRef.getCPtr(GEP), InBounds);
  }

  public static void AddIncoming(ValueRef PhiNode, ValueRefArray IncomingValues, BasicBlockRefArray IncomingBlocks, int Count) {
    LLVMJNI.AddIncoming(ValueRef.getCPtr(PhiNode), ValueRefArray.getCPtr(IncomingValues), IncomingValues, BasicBlockRefArray.getCPtr(IncomingBlocks), IncomingBlocks, Count);
  }

  public static int CountIncoming(ValueRef PhiNode) {
    return LLVMJNI.CountIncoming(ValueRef.getCPtr(PhiNode));
  }

  public static ValueRef GetIncomingValue(ValueRef PhiNode, int Index) {
    return new ValueRef(LLVMJNI.GetIncomingValue(ValueRef.getCPtr(PhiNode), Index), true);
  }

  public static BasicBlockRef GetIncomingBlock(ValueRef PhiNode, int Index) {
    return new BasicBlockRef(LLVMJNI.GetIncomingBlock(ValueRef.getCPtr(PhiNode), Index), true);
  }

  public static int GetNumIndices(ValueRef Inst) {
    return LLVMJNI.GetNumIndices(ValueRef.getCPtr(Inst));
  }

  public static SWIGTYPE_p_unsigned_int GetIndices(ValueRef Inst) {
    long cPtr = LLVMJNI.GetIndices(ValueRef.getCPtr(Inst));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static BuilderRef CreateBuilderInContext(ContextRef C) {
    return new BuilderRef(LLVMJNI.CreateBuilderInContext(ContextRef.getCPtr(C)), true);
  }

  public static BuilderRef CreateBuilder() {
    return new BuilderRef(LLVMJNI.CreateBuilder(), true);
  }

  public static void PositionBuilder(BuilderRef Builder, BasicBlockRef Block, ValueRef Instr) {
    LLVMJNI.PositionBuilder(BuilderRef.getCPtr(Builder), BasicBlockRef.getCPtr(Block), ValueRef.getCPtr(Instr));
  }

  public static void PositionBuilderBefore(BuilderRef Builder, ValueRef Instr) {
    LLVMJNI.PositionBuilderBefore(BuilderRef.getCPtr(Builder), ValueRef.getCPtr(Instr));
  }

  public static void PositionBuilderAtEnd(BuilderRef Builder, BasicBlockRef Block) {
    LLVMJNI.PositionBuilderAtEnd(BuilderRef.getCPtr(Builder), BasicBlockRef.getCPtr(Block));
  }

  public static BasicBlockRef GetInsertBlock(BuilderRef Builder) {
    return new BasicBlockRef(LLVMJNI.GetInsertBlock(BuilderRef.getCPtr(Builder)), true);
  }

  public static void ClearInsertionPosition(BuilderRef Builder) {
    LLVMJNI.ClearInsertionPosition(BuilderRef.getCPtr(Builder));
  }

  public static void InsertIntoBuilder(BuilderRef Builder, ValueRef Instr) {
    LLVMJNI.InsertIntoBuilder(BuilderRef.getCPtr(Builder), ValueRef.getCPtr(Instr));
  }

  public static void InsertIntoBuilderWithName(BuilderRef Builder, ValueRef Instr, String Name) {
    LLVMJNI.InsertIntoBuilderWithName(BuilderRef.getCPtr(Builder), ValueRef.getCPtr(Instr), Name);
  }

  public static void DisposeBuilder(BuilderRef Builder) {
    LLVMJNI.DisposeBuilder(BuilderRef.getCPtr(Builder));
  }

  public static void SetCurrentDebugLocation(BuilderRef Builder, ValueRef L) {
    LLVMJNI.SetCurrentDebugLocation(BuilderRef.getCPtr(Builder), ValueRef.getCPtr(L));
  }

  public static ValueRef GetCurrentDebugLocation(BuilderRef Builder) {
    return new ValueRef(LLVMJNI.GetCurrentDebugLocation(BuilderRef.getCPtr(Builder)), true);
  }

  public static void SetInstDebugLocation(BuilderRef Builder, ValueRef Inst) {
    LLVMJNI.SetInstDebugLocation(BuilderRef.getCPtr(Builder), ValueRef.getCPtr(Inst));
  }

  public static ValueRef BuildRetVoid(BuilderRef arg0) {
    return new ValueRef(LLVMJNI.BuildRetVoid(BuilderRef.getCPtr(arg0)), true);
  }

  public static ValueRef BuildRet(BuilderRef arg0, ValueRef V) {
    return new ValueRef(LLVMJNI.BuildRet(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V)), true);
  }

  public static ValueRef BuildAggregateRet(BuilderRef arg0, ValueRefArray RetVals, int N) {
    return new ValueRef(LLVMJNI.BuildAggregateRet(BuilderRef.getCPtr(arg0), ValueRefArray.getCPtr(RetVals), RetVals, N), true);
  }

  public static ValueRef BuildBr(BuilderRef arg0, BasicBlockRef Dest) {
    return new ValueRef(LLVMJNI.BuildBr(BuilderRef.getCPtr(arg0), BasicBlockRef.getCPtr(Dest)), true);
  }

  public static ValueRef BuildCondBr(BuilderRef arg0, ValueRef If, BasicBlockRef Then, BasicBlockRef Else) {
    return new ValueRef(LLVMJNI.BuildCondBr(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(If), BasicBlockRef.getCPtr(Then), BasicBlockRef.getCPtr(Else)), true);
  }

  public static ValueRef BuildSwitch(BuilderRef arg0, ValueRef V, BasicBlockRef Else, int NumCases) {
    return new ValueRef(LLVMJNI.BuildSwitch(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V), BasicBlockRef.getCPtr(Else), NumCases), true);
  }

  public static ValueRef BuildIndirectBr(BuilderRef B, ValueRef Addr, int NumDests) {
    return new ValueRef(LLVMJNI.BuildIndirectBr(BuilderRef.getCPtr(B), ValueRef.getCPtr(Addr), NumDests), true);
  }

  public static ValueRef BuildInvoke(BuilderRef arg0, ValueRef Fn, ValueRefArray Args, int NumArgs, BasicBlockRef Then, BasicBlockRef Catch, String Name) {
    return new ValueRef(LLVMJNI.BuildInvoke(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Fn), ValueRefArray.getCPtr(Args), Args, NumArgs, BasicBlockRef.getCPtr(Then), BasicBlockRef.getCPtr(Catch), Name), true);
  }

  public static ValueRef BuildLandingPad(BuilderRef B, TypeRef Ty, ValueRef PersFn, int NumClauses, String Name) {
    return new ValueRef(LLVMJNI.BuildLandingPad(BuilderRef.getCPtr(B), TypeRef.getCPtr(Ty), ValueRef.getCPtr(PersFn), NumClauses, Name), true);
  }

  public static ValueRef BuildResume(BuilderRef B, ValueRef Exn) {
    return new ValueRef(LLVMJNI.BuildResume(BuilderRef.getCPtr(B), ValueRef.getCPtr(Exn)), true);
  }

  public static ValueRef BuildUnreachable(BuilderRef arg0) {
    return new ValueRef(LLVMJNI.BuildUnreachable(BuilderRef.getCPtr(arg0)), true);
  }

  public static void AddCase(ValueRef Switch, ValueRef OnVal, BasicBlockRef Dest) {
    LLVMJNI.AddCase(ValueRef.getCPtr(Switch), ValueRef.getCPtr(OnVal), BasicBlockRef.getCPtr(Dest));
  }

  public static void AddDestination(ValueRef IndirectBr, BasicBlockRef Dest) {
    LLVMJNI.AddDestination(ValueRef.getCPtr(IndirectBr), BasicBlockRef.getCPtr(Dest));
  }

  public static int GetNumClauses(ValueRef LandingPad) {
    return LLVMJNI.GetNumClauses(ValueRef.getCPtr(LandingPad));
  }

  public static ValueRef GetClause(ValueRef LandingPad, int Idx) {
    return new ValueRef(LLVMJNI.GetClause(ValueRef.getCPtr(LandingPad), Idx), true);
  }

  public static void AddClause(ValueRef LandingPad, ValueRef ClauseVal) {
    LLVMJNI.AddClause(ValueRef.getCPtr(LandingPad), ValueRef.getCPtr(ClauseVal));
  }

  public static boolean IsCleanup(ValueRef LandingPad) {
    return LLVMJNI.IsCleanup(ValueRef.getCPtr(LandingPad));
  }

  public static void SetCleanup(ValueRef LandingPad, boolean Val) {
    LLVMJNI.SetCleanup(ValueRef.getCPtr(LandingPad), Val);
  }

  public static ValueRef BuildAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildAdd(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNSWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNSWAdd(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNUWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNUWAdd(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFAdd(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildSub(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNSWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNSWSub(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNUWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNUWSub(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFSub(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildMul(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNSWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNSWMul(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNUWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildNUWMul(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFMul(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildUDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildUDiv(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildSDiv(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildExactSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildExactSDiv(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFDiv(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildURem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildURem(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildSRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildSRem(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFRem(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildShl(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildShl(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildLShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildLShr(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildAShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildAShr(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildAnd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildAnd(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildOr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildOr(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildXor(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildXor(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildBinOp(BuilderRef B, Opcode Op, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildBinOp(BuilderRef.getCPtr(B), Op.swigValue(), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildNeg(BuilderRef arg0, ValueRef V, String Name) {
    return new ValueRef(LLVMJNI.BuildNeg(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V), Name), true);
  }

  public static ValueRef BuildNSWNeg(BuilderRef B, ValueRef V, String Name) {
    return new ValueRef(LLVMJNI.BuildNSWNeg(BuilderRef.getCPtr(B), ValueRef.getCPtr(V), Name), true);
  }

  public static ValueRef BuildNUWNeg(BuilderRef B, ValueRef V, String Name) {
    return new ValueRef(LLVMJNI.BuildNUWNeg(BuilderRef.getCPtr(B), ValueRef.getCPtr(V), Name), true);
  }

  public static ValueRef BuildFNeg(BuilderRef arg0, ValueRef V, String Name) {
    return new ValueRef(LLVMJNI.BuildFNeg(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V), Name), true);
  }

  public static ValueRef BuildNot(BuilderRef arg0, ValueRef V, String Name) {
    return new ValueRef(LLVMJNI.BuildNot(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V), Name), true);
  }

  public static ValueRef BuildMalloc(BuilderRef arg0, TypeRef Ty, String Name) {
    return new ValueRef(LLVMJNI.BuildMalloc(BuilderRef.getCPtr(arg0), TypeRef.getCPtr(Ty), Name), true);
  }

  public static ValueRef BuildArrayMalloc(BuilderRef arg0, TypeRef Ty, ValueRef Val, String Name) {
    return new ValueRef(LLVMJNI.BuildArrayMalloc(BuilderRef.getCPtr(arg0), TypeRef.getCPtr(Ty), ValueRef.getCPtr(Val), Name), true);
  }

  public static ValueRef BuildAlloca(BuilderRef arg0, TypeRef Ty, String Name) {
    return new ValueRef(LLVMJNI.BuildAlloca(BuilderRef.getCPtr(arg0), TypeRef.getCPtr(Ty), Name), true);
  }

  public static ValueRef BuildArrayAlloca(BuilderRef arg0, TypeRef Ty, ValueRef Val, String Name) {
    return new ValueRef(LLVMJNI.BuildArrayAlloca(BuilderRef.getCPtr(arg0), TypeRef.getCPtr(Ty), ValueRef.getCPtr(Val), Name), true);
  }

  public static ValueRef BuildFree(BuilderRef arg0, ValueRef PointerVal) {
    return new ValueRef(LLVMJNI.BuildFree(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(PointerVal)), true);
  }

  public static ValueRef BuildLoad(BuilderRef arg0, ValueRef PointerVal, String Name) {
    return new ValueRef(LLVMJNI.BuildLoad(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(PointerVal), Name), true);
  }

  public static ValueRef BuildStore(BuilderRef arg0, ValueRef Val, ValueRef Ptr) {
    return new ValueRef(LLVMJNI.BuildStore(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), ValueRef.getCPtr(Ptr)), true);
  }

  public static ValueRef BuildGEP(BuilderRef B, ValueRef Pointer, ValueRefArray Indices, int NumIndices, String Name) {
    return new ValueRef(LLVMJNI.BuildGEP(BuilderRef.getCPtr(B), ValueRef.getCPtr(Pointer), ValueRefArray.getCPtr(Indices), Indices, NumIndices, Name), true);
  }

  public static ValueRef BuildInBoundsGEP(BuilderRef B, ValueRef Pointer, ValueRefArray Indices, int NumIndices, String Name) {
    return new ValueRef(LLVMJNI.BuildInBoundsGEP(BuilderRef.getCPtr(B), ValueRef.getCPtr(Pointer), ValueRefArray.getCPtr(Indices), Indices, NumIndices, Name), true);
  }

  public static ValueRef BuildStructGEP(BuilderRef B, ValueRef Pointer, int Idx, String Name) {
    return new ValueRef(LLVMJNI.BuildStructGEP(BuilderRef.getCPtr(B), ValueRef.getCPtr(Pointer), Idx, Name), true);
  }

  public static ValueRef BuildGlobalString(BuilderRef B, String Str, String Name) {
    return new ValueRef(LLVMJNI.BuildGlobalString(BuilderRef.getCPtr(B), Str, Name), true);
  }

  public static ValueRef BuildGlobalStringPtr(BuilderRef B, String Str, String Name) {
    return new ValueRef(LLVMJNI.BuildGlobalStringPtr(BuilderRef.getCPtr(B), Str, Name), true);
  }

  public static boolean GetVolatile(ValueRef MemoryAccessInst) {
    return LLVMJNI.GetVolatile(ValueRef.getCPtr(MemoryAccessInst));
  }

  public static void SetVolatile(ValueRef MemoryAccessInst, boolean IsVolatile) {
    LLVMJNI.SetVolatile(ValueRef.getCPtr(MemoryAccessInst), IsVolatile);
  }

  public static AtomicOrdering GetOrdering(ValueRef MemoryAccessInst) {
    return AtomicOrdering.swigToEnum(LLVMJNI.GetOrdering(ValueRef.getCPtr(MemoryAccessInst)));
  }

  public static void SetOrdering(ValueRef MemoryAccessInst, AtomicOrdering Ordering) {
    LLVMJNI.SetOrdering(ValueRef.getCPtr(MemoryAccessInst), Ordering.swigValue());
  }

  public static ValueRef BuildTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildTrunc(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildZExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildZExt(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildSExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildSExt(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildFPToUI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildFPToUI(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildFPToSI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildFPToSI(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildUIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildUIToFP(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildSIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildSIToFP(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildFPTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildFPTrunc(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildFPExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildFPExt(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildPtrToInt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildPtrToInt(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildIntToPtr(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildIntToPtr(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildBitCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildAddrSpaceCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildAddrSpaceCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildZExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildZExtOrBitCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildSExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildSExtOrBitCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildTruncOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildTruncOrBitCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildCast(BuilderRef B, Opcode Op, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildCast(BuilderRef.getCPtr(B), Op.swigValue(), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildPointerCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildPointerCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildIntCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildIntCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildFPCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, String Name) {
    return new ValueRef(LLVMJNI.BuildFPCast(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), TypeRef.getCPtr(DestTy), Name), true);
  }

  public static ValueRef BuildICmp(BuilderRef arg0, IntPredicate Op, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildICmp(BuilderRef.getCPtr(arg0), Op.swigValue(), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFCmp(BuilderRef arg0, RealPredicate Op, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildFCmp(BuilderRef.getCPtr(arg0), Op.swigValue(), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildPhi(BuilderRef arg0, TypeRef Ty, String Name) {
    return new ValueRef(LLVMJNI.BuildPhi(BuilderRef.getCPtr(arg0), TypeRef.getCPtr(Ty), Name), true);
  }

  public static ValueRef BuildCall(BuilderRef arg0, ValueRef Fn, ValueRefArray Args, int NumArgs, String Name) {
    return new ValueRef(LLVMJNI.BuildCall(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Fn), ValueRefArray.getCPtr(Args), Args, NumArgs, Name), true);
  }

  public static ValueRef BuildSelect(BuilderRef arg0, ValueRef If, ValueRef Then, ValueRef Else, String Name) {
    return new ValueRef(LLVMJNI.BuildSelect(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(If), ValueRef.getCPtr(Then), ValueRef.getCPtr(Else), Name), true);
  }

  public static ValueRef BuildVAArg(BuilderRef arg0, ValueRef List, TypeRef Ty, String Name) {
    return new ValueRef(LLVMJNI.BuildVAArg(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(List), TypeRef.getCPtr(Ty), Name), true);
  }

  public static ValueRef BuildExtractElement(BuilderRef arg0, ValueRef VecVal, ValueRef Index, String Name) {
    return new ValueRef(LLVMJNI.BuildExtractElement(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(VecVal), ValueRef.getCPtr(Index), Name), true);
  }

  public static ValueRef BuildInsertElement(BuilderRef arg0, ValueRef VecVal, ValueRef EltVal, ValueRef Index, String Name) {
    return new ValueRef(LLVMJNI.BuildInsertElement(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(VecVal), ValueRef.getCPtr(EltVal), ValueRef.getCPtr(Index), Name), true);
  }

  public static ValueRef BuildShuffleVector(BuilderRef arg0, ValueRef V1, ValueRef V2, ValueRef Mask, String Name) {
    return new ValueRef(LLVMJNI.BuildShuffleVector(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(V1), ValueRef.getCPtr(V2), ValueRef.getCPtr(Mask), Name), true);
  }

  public static ValueRef BuildExtractValue(BuilderRef arg0, ValueRef AggVal, int Index, String Name) {
    return new ValueRef(LLVMJNI.BuildExtractValue(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(AggVal), Index, Name), true);
  }

  public static ValueRef BuildInsertValue(BuilderRef arg0, ValueRef AggVal, ValueRef EltVal, int Index, String Name) {
    return new ValueRef(LLVMJNI.BuildInsertValue(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(AggVal), ValueRef.getCPtr(EltVal), Index, Name), true);
  }

  public static ValueRef BuildIsNull(BuilderRef arg0, ValueRef Val, String Name) {
    return new ValueRef(LLVMJNI.BuildIsNull(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), Name), true);
  }

  public static ValueRef BuildIsNotNull(BuilderRef arg0, ValueRef Val, String Name) {
    return new ValueRef(LLVMJNI.BuildIsNotNull(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(Val), Name), true);
  }

  public static ValueRef BuildPtrDiff(BuilderRef arg0, ValueRef LHS, ValueRef RHS, String Name) {
    return new ValueRef(LLVMJNI.BuildPtrDiff(BuilderRef.getCPtr(arg0), ValueRef.getCPtr(LHS), ValueRef.getCPtr(RHS), Name), true);
  }

  public static ValueRef BuildFence(BuilderRef B, AtomicOrdering ordering, boolean singleThread, String Name) {
    return new ValueRef(LLVMJNI.BuildFence(BuilderRef.getCPtr(B), ordering.swigValue(), singleThread, Name), true);
  }

  public static ValueRef BuildAtomicRMW(BuilderRef B, AtomicRMWBinOp op, ValueRef PTR, ValueRef Val, AtomicOrdering ordering, boolean singleThread) {
    return new ValueRef(LLVMJNI.BuildAtomicRMW(BuilderRef.getCPtr(B), op.swigValue(), ValueRef.getCPtr(PTR), ValueRef.getCPtr(Val), ordering.swigValue(), singleThread), true);
  }

  public static ValueRef BuildAtomicCmpXchg(BuilderRef B, ValueRef Ptr, ValueRef Cmp, ValueRef New, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, boolean SingleThread) {
    return new ValueRef(LLVMJNI.BuildAtomicCmpXchg(BuilderRef.getCPtr(B), ValueRef.getCPtr(Ptr), ValueRef.getCPtr(Cmp), ValueRef.getCPtr(New), SuccessOrdering.swigValue(), FailureOrdering.swigValue(), SingleThread), true);
  }

  public static boolean IsAtomicSingleThread(ValueRef AtomicInst) {
    return LLVMJNI.IsAtomicSingleThread(ValueRef.getCPtr(AtomicInst));
  }

  public static void SetAtomicSingleThread(ValueRef AtomicInst, boolean SingleThread) {
    LLVMJNI.SetAtomicSingleThread(ValueRef.getCPtr(AtomicInst), SingleThread);
  }

  public static AtomicOrdering GetCmpXchgSuccessOrdering(ValueRef CmpXchgInst) {
    return AtomicOrdering.swigToEnum(LLVMJNI.GetCmpXchgSuccessOrdering(ValueRef.getCPtr(CmpXchgInst)));
  }

  public static void SetCmpXchgSuccessOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering) {
    LLVMJNI.SetCmpXchgSuccessOrdering(ValueRef.getCPtr(CmpXchgInst), Ordering.swigValue());
  }

  public static AtomicOrdering GetCmpXchgFailureOrdering(ValueRef CmpXchgInst) {
    return AtomicOrdering.swigToEnum(LLVMJNI.GetCmpXchgFailureOrdering(ValueRef.getCPtr(CmpXchgInst)));
  }

  public static void SetCmpXchgFailureOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering) {
    LLVMJNI.SetCmpXchgFailureOrdering(ValueRef.getCPtr(CmpXchgInst), Ordering.swigValue());
  }

  public static ModuleProviderRef CreateModuleProviderForExistingModule(ModuleRef M) {
    return new ModuleProviderRef(LLVMJNI.CreateModuleProviderForExistingModule(ModuleRef.getCPtr(M)), true);
  }

  public static void DisposeModuleProvider(ModuleProviderRef M) {
    LLVMJNI.DisposeModuleProvider(ModuleProviderRef.getCPtr(M));
  }

  public static boolean CreateMemoryBufferWithContentsOfFile(String Path, MemoryBufferRefOut OutMemBuf, StringOut OutMessage) {
    return LLVMJNI.CreateMemoryBufferWithContentsOfFile(Path, MemoryBufferRefOut.getCPtr(OutMemBuf), OutMemBuf, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean CreateMemoryBufferWithSTDIN(MemoryBufferRefOut OutMemBuf, StringOut OutMessage) {
    return LLVMJNI.CreateMemoryBufferWithSTDIN(MemoryBufferRefOut.getCPtr(OutMemBuf), OutMemBuf, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static MemoryBufferRef CreateMemoryBufferWithMemoryRange(byte[] InputData, String BufferName, boolean RequiresNullTerminator) {
    return new MemoryBufferRef(LLVMJNI.CreateMemoryBufferWithMemoryRange(InputData, BufferName, RequiresNullTerminator), true);
  }

  public static MemoryBufferRef CreateMemoryBufferWithMemoryRangeCopy(byte[] InputData, String BufferName) {
    return new MemoryBufferRef(LLVMJNI.CreateMemoryBufferWithMemoryRangeCopy(InputData, BufferName), true);
  }

  public static String GetBufferStart(MemoryBufferRef MemBuf) {
    return LLVMJNI.GetBufferStart(MemoryBufferRef.getCPtr(MemBuf));
  }

  public static long GetBufferSize(MemoryBufferRef MemBuf) {
    return LLVMJNI.GetBufferSize(MemoryBufferRef.getCPtr(MemBuf));
  }

  public static void DisposeMemoryBuffer(MemoryBufferRef MemBuf) {
    LLVMJNI.DisposeMemoryBuffer(MemoryBufferRef.getCPtr(MemBuf));
  }

  public static PassRegistryRef GetGlobalPassRegistry() {
    return new PassRegistryRef(LLVMJNI.GetGlobalPassRegistry(), true);
  }

  public static PassManagerRef CreatePassManager() {
    return new PassManagerRef(LLVMJNI.CreatePassManager(), true);
  }

  public static PassManagerRef CreateFunctionPassManagerForModule(ModuleRef M) {
    return new PassManagerRef(LLVMJNI.CreateFunctionPassManagerForModule(ModuleRef.getCPtr(M)), true);
  }

  public static PassManagerRef CreateFunctionPassManager(ModuleProviderRef MP) {
    return new PassManagerRef(LLVMJNI.CreateFunctionPassManager(ModuleProviderRef.getCPtr(MP)), true);
  }

  public static boolean RunPassManager(PassManagerRef PM, ModuleRef M) {
    return LLVMJNI.RunPassManager(PassManagerRef.getCPtr(PM), ModuleRef.getCPtr(M));
  }

  public static boolean InitializeFunctionPassManager(PassManagerRef FPM) {
    return LLVMJNI.InitializeFunctionPassManager(PassManagerRef.getCPtr(FPM));
  }

  public static boolean RunFunctionPassManager(PassManagerRef FPM, ValueRef F) {
    return LLVMJNI.RunFunctionPassManager(PassManagerRef.getCPtr(FPM), ValueRef.getCPtr(F));
  }

  public static boolean FinalizeFunctionPassManager(PassManagerRef FPM) {
    return LLVMJNI.FinalizeFunctionPassManager(PassManagerRef.getCPtr(FPM));
  }

  public static void DisposePassManager(PassManagerRef PM) {
    LLVMJNI.DisposePassManager(PassManagerRef.getCPtr(PM));
  }

  public static boolean StartMultithreaded() {
    return LLVMJNI.StartMultithreaded();
  }

  public static void StopMultithreaded() {
    LLVMJNI.StopMultithreaded();
  }

  public static boolean IsMultithreaded() {
    return LLVMJNI.IsMultithreaded();
  }

  public static boolean ParseBitcode(MemoryBufferRef MemBuf, ModuleRefOut OutModule, StringOut OutMessage) {
    return LLVMJNI.ParseBitcode(MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean ParseBitcode2(MemoryBufferRef MemBuf, ModuleRefOut OutModule) {
    return LLVMJNI.ParseBitcode2(MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule);
  }

  public static boolean ParseBitcodeInContext(ContextRef contextRef, MemoryBufferRef MemBuf, ModuleRefOut OutModule, StringOut OutMessage) {
    return LLVMJNI.ParseBitcodeInContext(ContextRef.getCPtr(contextRef), MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean ParseBitcodeInContext2(ContextRef contextRef, MemoryBufferRef MemBuf, ModuleRefOut OutModule) {
    return LLVMJNI.ParseBitcodeInContext2(ContextRef.getCPtr(contextRef), MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule);
  }

  public static boolean GetBitcodeModuleInContext(ContextRef contextRef, MemoryBufferRef MemBuf, ModuleRefOut OutM, StringOut OutMessage) {
    return LLVMJNI.GetBitcodeModuleInContext(ContextRef.getCPtr(contextRef), MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutM), OutM, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean GetBitcodeModuleInContext2(ContextRef contextRef, MemoryBufferRef MemBuf, ModuleRefOut OutM) {
    return LLVMJNI.GetBitcodeModuleInContext2(ContextRef.getCPtr(contextRef), MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutM), OutM);
  }

  public static boolean GetBitcodeModule(MemoryBufferRef MemBuf, ModuleRefOut OutM, StringOut OutMessage) {
    return LLVMJNI.GetBitcodeModule(MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutM), OutM, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean GetBitcodeModule2(MemoryBufferRef MemBuf, ModuleRefOut OutM) {
    return LLVMJNI.GetBitcodeModule2(MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutM), OutM);
  }

  public static int WriteBitcodeToFile(ModuleRef M, String Path) {
    return LLVMJNI.WriteBitcodeToFile(ModuleRef.getCPtr(M), Path);
  }

  public static int WriteBitcodeToFD(ModuleRef M, int FD, int ShouldClose, int Unbuffered) {
    return LLVMJNI.WriteBitcodeToFD(ModuleRef.getCPtr(M), FD, ShouldClose, Unbuffered);
  }

  public static MemoryBufferRef WriteBitcodeToMemoryBuffer(ModuleRef M) {
    return new MemoryBufferRef(LLVMJNI.WriteBitcodeToMemoryBuffer(ModuleRef.getCPtr(M)), true);
  }

  public static ObjectFileRef CreateObjectFile(MemoryBufferRef MemBuf) {
    long cPtr = LLVMJNI.CreateObjectFile(MemoryBufferRef.getCPtr(MemBuf));
    return (cPtr == 0) ? null : new ObjectFileRef(cPtr, false);
  }

  public static void DisposeObjectFile(ObjectFileRef ObjectFile) {
    LLVMJNI.DisposeObjectFile(ObjectFileRef.getCPtr(ObjectFile));
  }

  public static SectionIteratorRef GetSections(ObjectFileRef ObjectFile) {
    long cPtr = LLVMJNI.GetSections(ObjectFileRef.getCPtr(ObjectFile));
    return (cPtr == 0) ? null : new SectionIteratorRef(cPtr, false);
  }

  public static void DisposeSectionIterator(SectionIteratorRef SI) {
    LLVMJNI.DisposeSectionIterator(SectionIteratorRef.getCPtr(SI));
  }

  public static boolean IsSectionIteratorAtEnd(ObjectFileRef ObjectFile, SectionIteratorRef SI) {
    return LLVMJNI.IsSectionIteratorAtEnd(ObjectFileRef.getCPtr(ObjectFile), SectionIteratorRef.getCPtr(SI));
  }

  public static void MoveToNextSection(SectionIteratorRef SI) {
    LLVMJNI.MoveToNextSection(SectionIteratorRef.getCPtr(SI));
  }

  public static void MoveToContainingSection(SectionIteratorRef Sect, SymbolIteratorRef Sym) {
    LLVMJNI.MoveToContainingSection(SectionIteratorRef.getCPtr(Sect), SymbolIteratorRef.getCPtr(Sym));
  }

  public static SymbolIteratorRef GetSymbols(ObjectFileRef ObjectFile) {
    long cPtr = LLVMJNI.GetSymbols(ObjectFileRef.getCPtr(ObjectFile));
    return (cPtr == 0) ? null : new SymbolIteratorRef(cPtr, false);
  }

  public static void DisposeSymbolIterator(SymbolIteratorRef SI) {
    LLVMJNI.DisposeSymbolIterator(SymbolIteratorRef.getCPtr(SI));
  }

  public static boolean IsSymbolIteratorAtEnd(ObjectFileRef ObjectFile, SymbolIteratorRef SI) {
    return LLVMJNI.IsSymbolIteratorAtEnd(ObjectFileRef.getCPtr(ObjectFile), SymbolIteratorRef.getCPtr(SI));
  }

  public static void MoveToNextSymbol(SymbolIteratorRef SI) {
    LLVMJNI.MoveToNextSymbol(SymbolIteratorRef.getCPtr(SI));
  }

  public static String GetSectionName(SectionIteratorRef SI) {
    return LLVMJNI.GetSectionName(SectionIteratorRef.getCPtr(SI));
  }

  public static long GetSectionSize(SectionIteratorRef SI) {
    return LLVMJNI.GetSectionSize(SectionIteratorRef.getCPtr(SI));
  }

  public static String GetSectionContents(SectionIteratorRef SI) {
    return LLVMJNI.GetSectionContents(SectionIteratorRef.getCPtr(SI));
  }

  public static long GetSectionAddress(SectionIteratorRef SI) {
    return LLVMJNI.GetSectionAddress(SectionIteratorRef.getCPtr(SI));
  }

  public static boolean GetSectionContainsSymbol(SectionIteratorRef SI, SymbolIteratorRef Sym) {
    return LLVMJNI.GetSectionContainsSymbol(SectionIteratorRef.getCPtr(SI), SymbolIteratorRef.getCPtr(Sym));
  }

  public static RelocationIteratorRef GetRelocations(SectionIteratorRef Section) {
    long cPtr = LLVMJNI.GetRelocations(SectionIteratorRef.getCPtr(Section));
    return (cPtr == 0) ? null : new RelocationIteratorRef(cPtr, false);
  }

  public static void DisposeRelocationIterator(RelocationIteratorRef RI) {
    LLVMJNI.DisposeRelocationIterator(RelocationIteratorRef.getCPtr(RI));
  }

  public static boolean IsRelocationIteratorAtEnd(SectionIteratorRef Section, RelocationIteratorRef RI) {
    return LLVMJNI.IsRelocationIteratorAtEnd(SectionIteratorRef.getCPtr(Section), RelocationIteratorRef.getCPtr(RI));
  }

  public static void MoveToNextRelocation(RelocationIteratorRef RI) {
    LLVMJNI.MoveToNextRelocation(RelocationIteratorRef.getCPtr(RI));
  }

  public static String GetSymbolName(SymbolIteratorRef SI) {
    return LLVMJNI.GetSymbolName(SymbolIteratorRef.getCPtr(SI));
  }

  public static long GetSymbolAddress(SymbolIteratorRef SI) {
    return LLVMJNI.GetSymbolAddress(SymbolIteratorRef.getCPtr(SI));
  }

  public static long GetSymbolSize(SymbolIteratorRef SI) {
    return LLVMJNI.GetSymbolSize(SymbolIteratorRef.getCPtr(SI));
  }

  public static long GetRelocationOffset(RelocationIteratorRef RI) {
    return LLVMJNI.GetRelocationOffset(RelocationIteratorRef.getCPtr(RI));
  }

  public static SymbolIteratorRef GetRelocationSymbol(RelocationIteratorRef RI) {
    long cPtr = LLVMJNI.GetRelocationSymbol(RelocationIteratorRef.getCPtr(RI));
    return (cPtr == 0) ? null : new SymbolIteratorRef(cPtr, false);
  }

  public static long GetRelocationType(RelocationIteratorRef RI) {
    return LLVMJNI.GetRelocationType(RelocationIteratorRef.getCPtr(RI));
  }

  public static String GetRelocationTypeName(RelocationIteratorRef RI) {
    return LLVMJNI.GetRelocationTypeName(RelocationIteratorRef.getCPtr(RI));
  }

  public static String GetRelocationValueString(RelocationIteratorRef RI) {
    return LLVMJNI.GetRelocationValueString(RelocationIteratorRef.getCPtr(RI));
  }

  public static void AddArgumentPromotionPass(PassManagerRef PM) {
    LLVMJNI.AddArgumentPromotionPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddConstantMergePass(PassManagerRef PM) {
    LLVMJNI.AddConstantMergePass(PassManagerRef.getCPtr(PM));
  }

  public static void AddDeadArgEliminationPass(PassManagerRef PM) {
    LLVMJNI.AddDeadArgEliminationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddFunctionAttrsPass(PassManagerRef PM) {
    LLVMJNI.AddFunctionAttrsPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddFunctionInliningPass(PassManagerRef PM) {
    LLVMJNI.AddFunctionInliningPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddAlwaysInlinerPass(PassManagerRef PM) {
    LLVMJNI.AddAlwaysInlinerPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddGlobalDCEPass(PassManagerRef PM) {
    LLVMJNI.AddGlobalDCEPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddGlobalOptimizerPass(PassManagerRef PM) {
    LLVMJNI.AddGlobalOptimizerPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddIPConstantPropagationPass(PassManagerRef PM) {
    LLVMJNI.AddIPConstantPropagationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddPruneEHPass(PassManagerRef PM) {
    LLVMJNI.AddPruneEHPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddIPSCCPPass(PassManagerRef PM) {
    LLVMJNI.AddIPSCCPPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddInternalizePass(PassManagerRef arg0, int AllButMain) {
    LLVMJNI.AddInternalizePass(PassManagerRef.getCPtr(arg0), AllButMain);
  }

  public static void AddStripDeadPrototypesPass(PassManagerRef PM) {
    LLVMJNI.AddStripDeadPrototypesPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddStripSymbolsPass(PassManagerRef PM) {
    LLVMJNI.AddStripSymbolsPass(PassManagerRef.getCPtr(PM));
  }

  public static PassManagerBuilderRef PassManagerBuilderCreate() {
    long cPtr = LLVMJNI.PassManagerBuilderCreate();
    return (cPtr == 0) ? null : new PassManagerBuilderRef(cPtr, false);
  }

  public static void PassManagerBuilderDispose(PassManagerBuilderRef PMB) {
    LLVMJNI.PassManagerBuilderDispose(PassManagerBuilderRef.getCPtr(PMB));
  }

  public static void PassManagerBuilderSetOptLevel(PassManagerBuilderRef PMB, int OptLevel) {
    LLVMJNI.PassManagerBuilderSetOptLevel(PassManagerBuilderRef.getCPtr(PMB), OptLevel);
  }

  public static void PassManagerBuilderSetSizeLevel(PassManagerBuilderRef PMB, int SizeLevel) {
    LLVMJNI.PassManagerBuilderSetSizeLevel(PassManagerBuilderRef.getCPtr(PMB), SizeLevel);
  }

  public static void PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef PMB, boolean Value) {
    LLVMJNI.PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef.getCPtr(PMB), Value);
  }

  public static void PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef PMB, boolean Value) {
    LLVMJNI.PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef.getCPtr(PMB), Value);
  }

  public static void PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef PMB, boolean Value) {
    LLVMJNI.PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef.getCPtr(PMB), Value);
  }

  public static void PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef PMB, int Threshold) {
    LLVMJNI.PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef.getCPtr(PMB), Threshold);
  }

  public static void PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef PMB, PassManagerRef PM) {
    LLVMJNI.PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef.getCPtr(PMB), PassManagerRef.getCPtr(PM));
  }

  public static void PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef PMB, PassManagerRef PM) {
    LLVMJNI.PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef.getCPtr(PMB), PassManagerRef.getCPtr(PM));
  }

  public static void PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef PMB, PassManagerRef PM, boolean Internalize, boolean RunInliner) {
    LLVMJNI.PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef.getCPtr(PMB), PassManagerRef.getCPtr(PM), Internalize, RunInliner);
  }

  public static void AddAggressiveDCEPass(PassManagerRef PM) {
    LLVMJNI.AddAggressiveDCEPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddBitTrackingDCEPass(PassManagerRef PM) {
    LLVMJNI.AddBitTrackingDCEPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddAlignmentFromAssumptionsPass(PassManagerRef PM) {
    LLVMJNI.AddAlignmentFromAssumptionsPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddCFGSimplificationPass(PassManagerRef PM) {
    LLVMJNI.AddCFGSimplificationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddDeadStoreEliminationPass(PassManagerRef PM) {
    LLVMJNI.AddDeadStoreEliminationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddScalarizerPass(PassManagerRef PM) {
    LLVMJNI.AddScalarizerPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddMergedLoadStoreMotionPass(PassManagerRef PM) {
    LLVMJNI.AddMergedLoadStoreMotionPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddGVNPass(PassManagerRef PM) {
    LLVMJNI.AddGVNPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddIndVarSimplifyPass(PassManagerRef PM) {
    LLVMJNI.AddIndVarSimplifyPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddInstructionCombiningPass(PassManagerRef PM) {
    LLVMJNI.AddInstructionCombiningPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddJumpThreadingPass(PassManagerRef PM) {
    LLVMJNI.AddJumpThreadingPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLICMPass(PassManagerRef PM) {
    LLVMJNI.AddLICMPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopDeletionPass(PassManagerRef PM) {
    LLVMJNI.AddLoopDeletionPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopIdiomPass(PassManagerRef PM) {
    LLVMJNI.AddLoopIdiomPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopRotatePass(PassManagerRef PM) {
    LLVMJNI.AddLoopRotatePass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopRerollPass(PassManagerRef PM) {
    LLVMJNI.AddLoopRerollPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopUnrollPass(PassManagerRef PM) {
    LLVMJNI.AddLoopUnrollPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopUnswitchPass(PassManagerRef PM) {
    LLVMJNI.AddLoopUnswitchPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddMemCpyOptPass(PassManagerRef PM) {
    LLVMJNI.AddMemCpyOptPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddPartiallyInlineLibCallsPass(PassManagerRef PM) {
    LLVMJNI.AddPartiallyInlineLibCallsPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLowerSwitchPass(PassManagerRef PM) {
    LLVMJNI.AddLowerSwitchPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddPromoteMemoryToRegisterPass(PassManagerRef PM) {
    LLVMJNI.AddPromoteMemoryToRegisterPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddReassociatePass(PassManagerRef PM) {
    LLVMJNI.AddReassociatePass(PassManagerRef.getCPtr(PM));
  }

  public static void AddSCCPPass(PassManagerRef PM) {
    LLVMJNI.AddSCCPPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddScalarReplAggregatesPass(PassManagerRef PM) {
    LLVMJNI.AddScalarReplAggregatesPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddScalarReplAggregatesPassSSA(PassManagerRef PM) {
    LLVMJNI.AddScalarReplAggregatesPassSSA(PassManagerRef.getCPtr(PM));
  }

  public static void AddScalarReplAggregatesPassWithThreshold(PassManagerRef PM, int Threshold) {
    LLVMJNI.AddScalarReplAggregatesPassWithThreshold(PassManagerRef.getCPtr(PM), Threshold);
  }

  public static void AddSimplifyLibCallsPass(PassManagerRef PM) {
    LLVMJNI.AddSimplifyLibCallsPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddTailCallEliminationPass(PassManagerRef PM) {
    LLVMJNI.AddTailCallEliminationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddConstantPropagationPass(PassManagerRef PM) {
    LLVMJNI.AddConstantPropagationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddDemoteMemoryToRegisterPass(PassManagerRef PM) {
    LLVMJNI.AddDemoteMemoryToRegisterPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddVerifierPass(PassManagerRef PM) {
    LLVMJNI.AddVerifierPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddCorrelatedValuePropagationPass(PassManagerRef PM) {
    LLVMJNI.AddCorrelatedValuePropagationPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddEarlyCSEPass(PassManagerRef PM) {
    LLVMJNI.AddEarlyCSEPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLowerExpectIntrinsicPass(PassManagerRef PM) {
    LLVMJNI.AddLowerExpectIntrinsicPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddTypeBasedAliasAnalysisPass(PassManagerRef PM) {
    LLVMJNI.AddTypeBasedAliasAnalysisPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddScopedNoAliasAAPass(PassManagerRef PM) {
    LLVMJNI.AddScopedNoAliasAAPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddBasicAliasAnalysisPass(PassManagerRef PM) {
    LLVMJNI.AddBasicAliasAnalysisPass(PassManagerRef.getCPtr(PM));
  }

  public static void AddBBVectorizePass(PassManagerRef PM) {
    LLVMJNI.AddBBVectorizePass(PassManagerRef.getCPtr(PM));
  }

  public static void AddLoopVectorizePass(PassManagerRef PM) {
    LLVMJNI.AddLoopVectorizePass(PassManagerRef.getCPtr(PM));
  }

  public static void AddSLPVectorizePass(PassManagerRef PM) {
    LLVMJNI.AddSLPVectorizePass(PassManagerRef.getCPtr(PM));
  }

  public static void InitializeAllTargetInfos() {
    LLVMJNI.InitializeAllTargetInfos();
  }

  public static void InitializeAllTargets() {
    LLVMJNI.InitializeAllTargets();
  }

  public static void InitializeAllTargetMCs() {
    LLVMJNI.InitializeAllTargetMCs();
  }

  public static void InitializeAllAsmPrinters() {
    LLVMJNI.InitializeAllAsmPrinters();
  }

  public static void InitializeAllAsmParsers() {
    LLVMJNI.InitializeAllAsmParsers();
  }

  public static void InitializeAllDisassemblers() {
    LLVMJNI.InitializeAllDisassemblers();
  }

  public static boolean InitializeNativeAsmParser() {
    return LLVMJNI.InitializeNativeAsmParser();
  }

  public static boolean InitializeNativeAsmPrinter() {
    return LLVMJNI.InitializeNativeAsmPrinter();
  }

  public static boolean InitializeNativeDisassembler() {
    return LLVMJNI.InitializeNativeDisassembler();
  }

  public static TargetDataRef GetModuleDataLayout(ModuleRef M) {
    long cPtr = LLVMJNI.GetModuleDataLayout(ModuleRef.getCPtr(M));
    return (cPtr == 0) ? null : new TargetDataRef(cPtr, false);
  }

  public static void SetModuleDataLayout(ModuleRef M, TargetDataRef DL) {
    LLVMJNI.SetModuleDataLayout(ModuleRef.getCPtr(M), TargetDataRef.getCPtr(DL));
  }

  public static TargetDataRef CreateTargetData(String StringRep) {
    long cPtr = LLVMJNI.CreateTargetData(StringRep);
    return (cPtr == 0) ? null : new TargetDataRef(cPtr, false);
  }

  public static void DisposeTargetData(TargetDataRef TD) {
    LLVMJNI.DisposeTargetData(TargetDataRef.getCPtr(TD));
  }

  public static void AddTargetLibraryInfo(TargetLibraryInfoRef TLI, PassManagerRef PM) {
    LLVMJNI.AddTargetLibraryInfo(TargetLibraryInfoRef.getCPtr(TLI), PassManagerRef.getCPtr(PM));
  }

  public static String CopyStringRepOfTargetData(TargetDataRef TD) {
    return LLVMJNI.CopyStringRepOfTargetData(TargetDataRef.getCPtr(TD));
  }

  public static ByteOrdering ByteOrder(TargetDataRef TD) {
    return ByteOrdering.swigToEnum(LLVMJNI.ByteOrder(TargetDataRef.getCPtr(TD)));
  }

  public static int PointerSize(TargetDataRef TD) {
    return LLVMJNI.PointerSize(TargetDataRef.getCPtr(TD));
  }

  public static int PointerSizeForAS(TargetDataRef TD, int AS) {
    return LLVMJNI.PointerSizeForAS(TargetDataRef.getCPtr(TD), AS);
  }

  public static TypeRef IntPtrType(TargetDataRef TD) {
    return new TypeRef(LLVMJNI.IntPtrType(TargetDataRef.getCPtr(TD)), true);
  }

  public static TypeRef IntPtrTypeForAS(TargetDataRef TD, int AS) {
    return new TypeRef(LLVMJNI.IntPtrTypeForAS(TargetDataRef.getCPtr(TD), AS), true);
  }

  public static TypeRef IntPtrTypeInContext(ContextRef C, TargetDataRef TD) {
    return new TypeRef(LLVMJNI.IntPtrTypeInContext(ContextRef.getCPtr(C), TargetDataRef.getCPtr(TD)), true);
  }

  public static TypeRef IntPtrTypeForASInContext(ContextRef C, TargetDataRef TD, int AS) {
    return new TypeRef(LLVMJNI.IntPtrTypeForASInContext(ContextRef.getCPtr(C), TargetDataRef.getCPtr(TD), AS), true);
  }

  public static java.math.BigInteger SizeOfTypeInBits(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.SizeOfTypeInBits(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static java.math.BigInteger StoreSizeOfType(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.StoreSizeOfType(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static java.math.BigInteger ABISizeOfType(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.ABISizeOfType(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static int ABIAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.ABIAlignmentOfType(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static int CallFrameAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.CallFrameAlignmentOfType(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static int PreferredAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    return LLVMJNI.PreferredAlignmentOfType(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(Ty));
  }

  public static int PreferredAlignmentOfGlobal(TargetDataRef TD, ValueRef GlobalVar) {
    return LLVMJNI.PreferredAlignmentOfGlobal(TargetDataRef.getCPtr(TD), ValueRef.getCPtr(GlobalVar));
  }

  public static int ElementAtOffset(TargetDataRef TD, TypeRef StructTy, java.math.BigInteger Offset) {
    return LLVMJNI.ElementAtOffset(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(StructTy), Offset);
  }

  public static java.math.BigInteger OffsetOfElement(TargetDataRef TD, TypeRef StructTy, int Element) {
    return LLVMJNI.OffsetOfElement(TargetDataRef.getCPtr(TD), TypeRef.getCPtr(StructTy), Element);
  }

  public static TargetRef GetFirstTarget() {
    long cPtr = LLVMJNI.GetFirstTarget();
    return (cPtr == 0) ? null : new TargetRef(cPtr, false);
  }

  public static TargetRef GetNextTarget(TargetRef T) {
    long cPtr = LLVMJNI.GetNextTarget(TargetRef.getCPtr(T));
    return (cPtr == 0) ? null : new TargetRef(cPtr, false);
  }

  public static TargetRef GetTargetFromName(String Name) {
    long cPtr = LLVMJNI.GetTargetFromName(Name);
    return (cPtr == 0) ? null : new TargetRef(cPtr, false);
  }

  public static boolean GetTargetFromTriple(String Triple, TargetRefOut T, StringOut ErrorMessage) {
    return LLVMJNI.GetTargetFromTriple(Triple, TargetRefOut.getCPtr(T), T, StringOut.getCPtr(ErrorMessage), ErrorMessage);
  }

  public static String GetTargetName(TargetRef T) {
    return LLVMJNI.GetTargetName(TargetRef.getCPtr(T));
  }

  public static String GetTargetDescription(TargetRef T) {
    return LLVMJNI.GetTargetDescription(TargetRef.getCPtr(T));
  }

  public static boolean TargetHasJIT(TargetRef T) {
    return LLVMJNI.TargetHasJIT(TargetRef.getCPtr(T));
  }

  public static boolean TargetHasTargetMachine(TargetRef T) {
    return LLVMJNI.TargetHasTargetMachine(TargetRef.getCPtr(T));
  }

  public static boolean TargetHasAsmBackend(TargetRef T) {
    return LLVMJNI.TargetHasAsmBackend(TargetRef.getCPtr(T));
  }

  public static TargetMachineRef CreateTargetMachine(TargetRef T, String Triple, String CPU, String Features, CodeGenOptLevel Level, RelocMode Reloc, CodeModel CodeModel) {
    long cPtr = LLVMJNI.CreateTargetMachine(TargetRef.getCPtr(T), Triple, CPU, Features, Level.swigValue(), Reloc.swigValue(), CodeModel.swigValue());
    return (cPtr == 0) ? null : new TargetMachineRef(cPtr, false);
  }

  public static void DisposeTargetMachine(TargetMachineRef T) {
    LLVMJNI.DisposeTargetMachine(TargetMachineRef.getCPtr(T));
  }

  public static TargetRef GetTargetMachineTarget(TargetMachineRef T) {
    long cPtr = LLVMJNI.GetTargetMachineTarget(TargetMachineRef.getCPtr(T));
    return (cPtr == 0) ? null : new TargetRef(cPtr, false);
  }

  public static String GetTargetMachineTriple(TargetMachineRef T) {
    return LLVMJNI.GetTargetMachineTriple(TargetMachineRef.getCPtr(T));
  }

  public static String GetTargetMachineCPU(TargetMachineRef T) {
    return LLVMJNI.GetTargetMachineCPU(TargetMachineRef.getCPtr(T));
  }

  public static String GetTargetMachineFeatureString(TargetMachineRef T) {
    return LLVMJNI.GetTargetMachineFeatureString(TargetMachineRef.getCPtr(T));
  }

  public static TargetDataRef CreateTargetDataLayout(TargetMachineRef T) {
    long cPtr = LLVMJNI.CreateTargetDataLayout(TargetMachineRef.getCPtr(T));
    return (cPtr == 0) ? null : new TargetDataRef(cPtr, false);
  }

  public static void SetTargetMachineAsmVerbosity(TargetMachineRef T, boolean VerboseAsm) {
    LLVMJNI.SetTargetMachineAsmVerbosity(TargetMachineRef.getCPtr(T), VerboseAsm);
  }

  public static boolean TargetMachineEmitToFile(TargetMachineRef T, ModuleRef M, String Filename, CodeGenFileType codegen, StringOut ErrorMessage) {
    return LLVMJNI.TargetMachineEmitToFile(TargetMachineRef.getCPtr(T), ModuleRef.getCPtr(M), Filename, codegen.swigValue(), StringOut.getCPtr(ErrorMessage), ErrorMessage);
  }

  public static boolean TargetMachineEmitToMemoryBuffer(TargetMachineRef T, ModuleRef M, CodeGenFileType codegen, StringOut ErrorMessage, MemoryBufferRefOut OutMemBuf) {
    return LLVMJNI.TargetMachineEmitToMemoryBuffer(TargetMachineRef.getCPtr(T), ModuleRef.getCPtr(M), codegen.swigValue(), StringOut.getCPtr(ErrorMessage), ErrorMessage, MemoryBufferRefOut.getCPtr(OutMemBuf), OutMemBuf);
  }

  public static String GetDefaultTargetTriple() {
    return LLVMJNI.GetDefaultTargetTriple();
  }

  public static void AddAnalysisPasses(TargetMachineRef T, PassManagerRef PM) {
    LLVMJNI.AddAnalysisPasses(TargetMachineRef.getCPtr(T), PassManagerRef.getCPtr(PM));
  }

  public static boolean LinkModules2(ModuleRef Dest, ModuleRef Src) {
    return LLVMJNI.LinkModules2(ModuleRef.getCPtr(Dest), ModuleRef.getCPtr(Src));
  }

  public static String getLlvmHostTriple() {
    return LLVMJNI.llvmHostTriple_get();
  }

  public static void PassManagerBuilderSetDisableTailCalls(PassManagerBuilderRef PMB, boolean Value) {
    LLVMJNI.PassManagerBuilderSetDisableTailCalls(PassManagerBuilderRef.getCPtr(PMB), Value);
  }

  public static void PassManagerBuilderUseAlwaysInliner(PassManagerBuilderRef PMB, boolean InsertLifetime) {
    LLVMJNI.PassManagerBuilderUseAlwaysInliner(PassManagerBuilderRef.getCPtr(PMB), InsertLifetime);
  }

  public static boolean ParseIR(MemoryBufferRef MemBuf, ModuleRefOut OutModule, StringOut OutMessage) {
    return LLVMJNI.ParseIR(MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static boolean ParseIRInContext(ContextRef contextRef, MemoryBufferRef MemBuf, ModuleRefOut OutModule, StringOut OutMessage) {
    return LLVMJNI.ParseIRInContext(ContextRef.getCPtr(contextRef), MemoryBufferRef.getCPtr(MemBuf), ModuleRefOut.getCPtr(OutModule), OutModule, StringOut.getCPtr(OutMessage), OutMessage);
  }

  public static TargetRef LookupTarget(String Triple, StringOut ErrorMessage) {
    long cPtr = LLVMJNI.LookupTarget(Triple, StringOut.getCPtr(ErrorMessage), ErrorMessage);
    return (cPtr == 0) ? null : new TargetRef(cPtr, false);
  }

  public static boolean TargetMachineGetAsmVerbosityDefault(TargetMachineRef T) {
    return LLVMJNI.TargetMachineGetAsmVerbosityDefault(TargetMachineRef.getCPtr(T));
  }

  public static void TargetMachineSetAsmVerbosityDefault(TargetMachineRef T, boolean Value) {
    LLVMJNI.TargetMachineSetAsmVerbosityDefault(TargetMachineRef.getCPtr(T), Value);
  }

  public static boolean TargetMachineGetDataSections(TargetMachineRef T) {
    return LLVMJNI.TargetMachineGetDataSections(TargetMachineRef.getCPtr(T));
  }

  public static boolean TargetMachineGetFunctionSections(TargetMachineRef T) {
    return LLVMJNI.TargetMachineGetFunctionSections(TargetMachineRef.getCPtr(T));
  }

  public static void TargetMachineSetDataSections(TargetMachineRef T, boolean Value) {
    LLVMJNI.TargetMachineSetDataSections(TargetMachineRef.getCPtr(T), Value);
  }

  public static void TargetMachineSetFunctionSections(TargetMachineRef T, boolean Value) {
    LLVMJNI.TargetMachineSetFunctionSections(TargetMachineRef.getCPtr(T), Value);
  }

  public static TargetOptionsRef GetTargetMachineTargetOptions(TargetMachineRef T) {
    long cPtr = LLVMJNI.GetTargetMachineTargetOptions(TargetMachineRef.getCPtr(T));
    return (cPtr == 0) ? null : new TargetOptionsRef(cPtr, false);
  }

  public static boolean TargetOptionsGetPrintMachineCode(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetPrintMachineCode(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetPrintMachineCode(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetPrintMachineCode(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetLessPreciseFPMADOption(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetLessPreciseFPMADOption(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetLessPreciseFPMADOption(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetLessPreciseFPMADOption(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetUnsafeFPMath(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetUnsafeFPMath(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetUnsafeFPMath(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetUnsafeFPMath(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetNoInfsFPMath(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetNoInfsFPMath(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetNoInfsFPMath(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetNoInfsFPMath(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetNoNaNsFPMath(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetNoNaNsFPMath(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetNoNaNsFPMath(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetNoNaNsFPMath(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetHonorSignDependentRoundingFPMathOption(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetHonorSignDependentRoundingFPMathOption(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetHonorSignDependentRoundingFPMathOption(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetHonorSignDependentRoundingFPMathOption(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetNoZerosInBSS(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetNoZerosInBSS(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetNoZerosInBSS(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetNoZerosInBSS(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetGuaranteedTailCallOpt(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetGuaranteedTailCallOpt(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetGuaranteedTailCallOpt(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetGuaranteedTailCallOpt(TargetOptionsRef.getCPtr(O), V);
  }

  public static int TargetOptionsGetStackAlignmentOverride(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetStackAlignmentOverride(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetStackAlignmentOverride(TargetOptionsRef O, int V) {
    LLVMJNI.TargetOptionsSetStackAlignmentOverride(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetEnableFastISel(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetEnableFastISel(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetEnableFastISel(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetEnableFastISel(TargetOptionsRef.getCPtr(O), V);
  }

  public static boolean TargetOptionsGetUseInitArray(TargetOptionsRef O) {
    return LLVMJNI.TargetOptionsGetUseInitArray(TargetOptionsRef.getCPtr(O));
  }

  public static void TargetOptionsSetUseInitArray(TargetOptionsRef O, boolean V) {
    LLVMJNI.TargetOptionsSetUseInitArray(TargetOptionsRef.getCPtr(O), V);
  }

  public static FloatABIType TargetOptionsGetFloatABIType(TargetOptionsRef O) {
    return FloatABIType.swigToEnum(LLVMJNI.TargetOptionsGetFloatABIType(TargetOptionsRef.getCPtr(O)));
  }

  public static void TargetOptionsSetFloatABIType(TargetOptionsRef O, FloatABIType V) {
    LLVMJNI.TargetOptionsSetFloatABIType(TargetOptionsRef.getCPtr(O), V.swigValue());
  }

  public static FPOpFusionMode TargetOptionsGetAllowFPOpFusion(TargetOptionsRef O) {
    return FPOpFusionMode.swigToEnum(LLVMJNI.TargetOptionsGetAllowFPOpFusion(TargetOptionsRef.getCPtr(O)));
  }

  public static void TargetOptionsSetAllowFPOpFusion(TargetOptionsRef O, FPOpFusionMode V) {
    LLVMJNI.TargetOptionsSetAllowFPOpFusion(TargetOptionsRef.getCPtr(O), V.swigValue());
  }

  public static void ModuleSetPIELevel(ModuleRef M, PIELevel V) {
    LLVMJNI.ModuleSetPIELevel(ModuleRef.getCPtr(M), V.swigValue());
  }

  public static PIELevel ModuleGetPIELevel(ModuleRef M) {
    return PIELevel.swigToEnum(LLVMJNI.ModuleGetPIELevel(ModuleRef.getCPtr(M)));
  }

  public static int TargetMachineAssembleToFile(TargetMachineRef TM, MemoryBufferRef Mem, String FilePath, boolean RelaxAll, boolean IncrementalLinkerCompatible, boolean DWARFMustBeAtTheEnd, boolean NoExecStack, StringOut ErrorMessage) {
    return LLVMJNI.TargetMachineAssembleToFile(TargetMachineRef.getCPtr(TM), MemoryBufferRef.getCPtr(Mem), FilePath, RelaxAll, IncrementalLinkerCompatible, DWARFMustBeAtTheEnd, NoExecStack, StringOut.getCPtr(ErrorMessage), ErrorMessage);
  }

  public static void GetLineInfoForAddressRange(ObjectFileRef O, long Address, long Size, IntOut OutSize, LongArrayOut Out) {
    LLVMJNI.GetLineInfoForAddressRange(ObjectFileRef.getCPtr(O), Address, Size, IntOut.getCPtr(OutSize), OutSize, LongArrayOut.getCPtr(Out), Out);
  }

  public static long CopySectionContents(SectionIteratorRef SI, byte[] Dest) {
    return LLVMJNI.CopySectionContents(SectionIteratorRef.getCPtr(SI), Dest);
  }

  public static ModuleRef ClangCompileFile(ContextRef Context, String Data, String FileName, String Triple, StringOut ErrorMessage) {
    return new ModuleRef(LLVMJNI.ClangCompileFile(ContextRef.getCPtr(Context), Data, FileName, Triple, StringOut.getCPtr(ErrorMessage), ErrorMessage), true);
  }

}
